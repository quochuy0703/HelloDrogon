<!DOCTYPE html>
<html>
<%c++
    auto name=@@.get<std::string>("name");
	bool nameIsEmpty = name == "";
	if (nameIsEmpty)
		name = "anonymous";
	auto message = "Hello, " + name + " from a CSP templates";
%>
<head>
    <meta charset="UTF-8">
    <title>[[ name ]]</title>
</head>
<body>
<script src="https://cdn.jsdelivr.net/npm/hls.js@1"></script>
<!-- Or if you want the latest version from the main branch -->
<!-- <script src="https://cdn.jsdelivr.net/npm/hls.js@canary"></script> -->
<video id="video"></video>
<script>
  var video = document.getElementById('video');
  <!-- var videoSrc = 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8'; -->
  var videoSrc = 'http://localhost:5555/static/video/out.m3u8';
  if (Hls.isSupported()) {
    var hls = new Hls();
    hls.loadSource(videoSrc);
    hls.attachMedia(video);
  }
  // HLS.js is not supported on platforms that do not have Media Source
  // Extensions (MSE) enabled.
  //
  // When the browser has built-in HLS support (check using `canPlayType`),
  // we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video
  // element through the `src` property. This is using the built-in support
  // of the plain video element, without using HLS.js.
  //
  // Note: it would be more normal to wait on the 'canplay' event below however
  // on Safari (where you are most likely to find built-in HLS support) the
  // video.src URL must be on the user-driven white-list before a 'canplay'
  // event will be emitted; the last video event that can be reliably
  // listened-for when the URL is not on the white-list is 'loadedmetadata'.
  else if (video.canPlayType('application/vnd.apple.mpegurl')) {
    video.src = videoSrc;
  }
</script>
    <%c++ $$<<message; %>
	<%c++
	if (nameIsEmpty)
	{
		$$ << "<br>"
			<< "You can revisit the same page and append ?name=<i>your_name</i> to change the name";
	}
	%>
</body>
</html>