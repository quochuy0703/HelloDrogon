/**
 *
 *  TmProgram.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TmProgram.h"
#include "TdRunnumber.h"
#include "TmResetcountpoint.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::test;

const std::string TmProgram::Cols::_programid = "programid";
const std::string TmProgram::Cols::_programname = "programname";
const std::string TmProgram::Cols::_runnopattern = "runnopattern";
const std::string TmProgram::Cols::_yeardigit = "yeardigit";
const std::string TmProgram::Cols::_rundigit = "rundigit";
const std::string TmProgram::Cols::_resetcountpoint = "resetcountpoint";
const std::string TmProgram::Cols::_insertdate = "insertdate";
const std::string TmProgram::Cols::_insertby = "insertby";
const std::string TmProgram::Cols::_updatedate = "updatedate";
const std::string TmProgram::Cols::_updateby = "updateby";
const std::string TmProgram::primaryKeyName = "";
const bool TmProgram::hasPrimaryKey = false;
const std::string TmProgram::tableName = "tm_program";

const std::vector<typename TmProgram::MetaData> TmProgram::metaData_={
{"programid","int32_t","integer",4,0,0,1},
{"programname","std::string","character varying",100,0,0,0},
{"runnopattern","std::string","character varying",20,0,0,0},
{"yeardigit","int32_t","integer",4,0,0,1},
{"rundigit","int32_t","integer",4,0,0,1},
{"resetcountpoint","int32_t","integer",4,0,0,1},
{"insertdate","::trantor::Date","timestamp without time zone",0,0,0,1},
{"insertby","std::string","character varying",10,0,0,0},
{"updatedate","::trantor::Date","timestamp without time zone",0,0,0,0},
{"updateby","std::string","character varying",10,0,0,0}
};
const std::string &TmProgram::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TmProgram::TmProgram(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["programid"].isNull())
        {
            programid_=std::make_shared<int32_t>(r["programid"].as<int32_t>());
        }
        if(!r["programname"].isNull())
        {
            programname_=std::make_shared<std::string>(r["programname"].as<std::string>());
        }
        if(!r["runnopattern"].isNull())
        {
            runnopattern_=std::make_shared<std::string>(r["runnopattern"].as<std::string>());
        }
        if(!r["yeardigit"].isNull())
        {
            yeardigit_=std::make_shared<int32_t>(r["yeardigit"].as<int32_t>());
        }
        if(!r["rundigit"].isNull())
        {
            rundigit_=std::make_shared<int32_t>(r["rundigit"].as<int32_t>());
        }
        if(!r["resetcountpoint"].isNull())
        {
            resetcountpoint_=std::make_shared<int32_t>(r["resetcountpoint"].as<int32_t>());
        }
        if(!r["insertdate"].isNull())
        {
            auto timeStr = r["insertdate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["insertby"].isNull())
        {
            insertby_=std::make_shared<std::string>(r["insertby"].as<std::string>());
        }
        if(!r["updatedate"].isNull())
        {
            auto timeStr = r["updatedate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updateby"].isNull())
        {
            updateby_=std::make_shared<std::string>(r["updateby"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 10 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            programid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            programname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            runnopattern_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            yeardigit_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            rundigit_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            resetcountpoint_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            insertby_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            updateby_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

TmProgram::TmProgram(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 10)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            programid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            programname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            runnopattern_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            yeardigit_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            rundigit_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            resetcountpoint_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            insertby_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            updateby_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
}

TmProgram::TmProgram(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("programid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["programid"].isNull())
        {
            programid_=std::make_shared<int32_t>((int32_t)pJson["programid"].asInt64());
        }
    }
    if(pJson.isMember("programname"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["programname"].isNull())
        {
            programname_=std::make_shared<std::string>(pJson["programname"].asString());
        }
    }
    if(pJson.isMember("runnopattern"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["runnopattern"].isNull())
        {
            runnopattern_=std::make_shared<std::string>(pJson["runnopattern"].asString());
        }
    }
    if(pJson.isMember("yeardigit"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["yeardigit"].isNull())
        {
            yeardigit_=std::make_shared<int32_t>((int32_t)pJson["yeardigit"].asInt64());
        }
    }
    if(pJson.isMember("rundigit"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["rundigit"].isNull())
        {
            rundigit_=std::make_shared<int32_t>((int32_t)pJson["rundigit"].asInt64());
        }
    }
    if(pJson.isMember("resetcountpoint"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["resetcountpoint"].isNull())
        {
            resetcountpoint_=std::make_shared<int32_t>((int32_t)pJson["resetcountpoint"].asInt64());
        }
    }
    if(pJson.isMember("insertdate"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["insertdate"].isNull())
        {
            auto timeStr = pJson["insertdate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("insertby"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["insertby"].isNull())
        {
            insertby_=std::make_shared<std::string>(pJson["insertby"].asString());
        }
    }
    if(pJson.isMember("updatedate"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["updatedate"].isNull())
        {
            auto timeStr = pJson["updatedate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updateby"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["updateby"].isNull())
        {
            updateby_=std::make_shared<std::string>(pJson["updateby"].asString());
        }
    }
}

void TmProgram::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 10)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            programid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            programname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            runnopattern_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            yeardigit_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            rundigit_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            resetcountpoint_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            insertby_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            updateby_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
}

void TmProgram::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("programid"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["programid"].isNull())
        {
            programid_=std::make_shared<int32_t>((int32_t)pJson["programid"].asInt64());
        }
    }
    if(pJson.isMember("programname"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["programname"].isNull())
        {
            programname_=std::make_shared<std::string>(pJson["programname"].asString());
        }
    }
    if(pJson.isMember("runnopattern"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["runnopattern"].isNull())
        {
            runnopattern_=std::make_shared<std::string>(pJson["runnopattern"].asString());
        }
    }
    if(pJson.isMember("yeardigit"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["yeardigit"].isNull())
        {
            yeardigit_=std::make_shared<int32_t>((int32_t)pJson["yeardigit"].asInt64());
        }
    }
    if(pJson.isMember("rundigit"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["rundigit"].isNull())
        {
            rundigit_=std::make_shared<int32_t>((int32_t)pJson["rundigit"].asInt64());
        }
    }
    if(pJson.isMember("resetcountpoint"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["resetcountpoint"].isNull())
        {
            resetcountpoint_=std::make_shared<int32_t>((int32_t)pJson["resetcountpoint"].asInt64());
        }
    }
    if(pJson.isMember("insertdate"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["insertdate"].isNull())
        {
            auto timeStr = pJson["insertdate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("insertby"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["insertby"].isNull())
        {
            insertby_=std::make_shared<std::string>(pJson["insertby"].asString());
        }
    }
    if(pJson.isMember("updatedate"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["updatedate"].isNull())
        {
            auto timeStr = pJson["updatedate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updateby"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["updateby"].isNull())
        {
            updateby_=std::make_shared<std::string>(pJson["updateby"].asString());
        }
    }
}

const int32_t &TmProgram::getValueOfProgramid() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(programid_)
        return *programid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TmProgram::getProgramid() const noexcept
{
    return programid_;
}
void TmProgram::setProgramid(const int32_t &pProgramid) noexcept
{
    programid_ = std::make_shared<int32_t>(pProgramid);
    dirtyFlag_[0] = true;
}

const std::string &TmProgram::getValueOfProgramname() const noexcept
{
    static const std::string defaultValue = std::string();
    if(programname_)
        return *programname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TmProgram::getProgramname() const noexcept
{
    return programname_;
}
void TmProgram::setProgramname(const std::string &pProgramname) noexcept
{
    programname_ = std::make_shared<std::string>(pProgramname);
    dirtyFlag_[1] = true;
}
void TmProgram::setProgramname(std::string &&pProgramname) noexcept
{
    programname_ = std::make_shared<std::string>(std::move(pProgramname));
    dirtyFlag_[1] = true;
}
void TmProgram::setProgramnameToNull() noexcept
{
    programname_.reset();
    dirtyFlag_[1] = true;
}

const std::string &TmProgram::getValueOfRunnopattern() const noexcept
{
    static const std::string defaultValue = std::string();
    if(runnopattern_)
        return *runnopattern_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TmProgram::getRunnopattern() const noexcept
{
    return runnopattern_;
}
void TmProgram::setRunnopattern(const std::string &pRunnopattern) noexcept
{
    runnopattern_ = std::make_shared<std::string>(pRunnopattern);
    dirtyFlag_[2] = true;
}
void TmProgram::setRunnopattern(std::string &&pRunnopattern) noexcept
{
    runnopattern_ = std::make_shared<std::string>(std::move(pRunnopattern));
    dirtyFlag_[2] = true;
}
void TmProgram::setRunnopatternToNull() noexcept
{
    runnopattern_.reset();
    dirtyFlag_[2] = true;
}

const int32_t &TmProgram::getValueOfYeardigit() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(yeardigit_)
        return *yeardigit_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TmProgram::getYeardigit() const noexcept
{
    return yeardigit_;
}
void TmProgram::setYeardigit(const int32_t &pYeardigit) noexcept
{
    yeardigit_ = std::make_shared<int32_t>(pYeardigit);
    dirtyFlag_[3] = true;
}

const int32_t &TmProgram::getValueOfRundigit() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(rundigit_)
        return *rundigit_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TmProgram::getRundigit() const noexcept
{
    return rundigit_;
}
void TmProgram::setRundigit(const int32_t &pRundigit) noexcept
{
    rundigit_ = std::make_shared<int32_t>(pRundigit);
    dirtyFlag_[4] = true;
}

const int32_t &TmProgram::getValueOfResetcountpoint() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(resetcountpoint_)
        return *resetcountpoint_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TmProgram::getResetcountpoint() const noexcept
{
    return resetcountpoint_;
}
void TmProgram::setResetcountpoint(const int32_t &pResetcountpoint) noexcept
{
    resetcountpoint_ = std::make_shared<int32_t>(pResetcountpoint);
    dirtyFlag_[5] = true;
}

const ::trantor::Date &TmProgram::getValueOfInsertdate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(insertdate_)
        return *insertdate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TmProgram::getInsertdate() const noexcept
{
    return insertdate_;
}
void TmProgram::setInsertdate(const ::trantor::Date &pInsertdate) noexcept
{
    insertdate_ = std::make_shared<::trantor::Date>(pInsertdate);
    dirtyFlag_[6] = true;
}

const std::string &TmProgram::getValueOfInsertby() const noexcept
{
    static const std::string defaultValue = std::string();
    if(insertby_)
        return *insertby_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TmProgram::getInsertby() const noexcept
{
    return insertby_;
}
void TmProgram::setInsertby(const std::string &pInsertby) noexcept
{
    insertby_ = std::make_shared<std::string>(pInsertby);
    dirtyFlag_[7] = true;
}
void TmProgram::setInsertby(std::string &&pInsertby) noexcept
{
    insertby_ = std::make_shared<std::string>(std::move(pInsertby));
    dirtyFlag_[7] = true;
}
void TmProgram::setInsertbyToNull() noexcept
{
    insertby_.reset();
    dirtyFlag_[7] = true;
}

const ::trantor::Date &TmProgram::getValueOfUpdatedate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedate_)
        return *updatedate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TmProgram::getUpdatedate() const noexcept
{
    return updatedate_;
}
void TmProgram::setUpdatedate(const ::trantor::Date &pUpdatedate) noexcept
{
    updatedate_ = std::make_shared<::trantor::Date>(pUpdatedate);
    dirtyFlag_[8] = true;
}
void TmProgram::setUpdatedateToNull() noexcept
{
    updatedate_.reset();
    dirtyFlag_[8] = true;
}

const std::string &TmProgram::getValueOfUpdateby() const noexcept
{
    static const std::string defaultValue = std::string();
    if(updateby_)
        return *updateby_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TmProgram::getUpdateby() const noexcept
{
    return updateby_;
}
void TmProgram::setUpdateby(const std::string &pUpdateby) noexcept
{
    updateby_ = std::make_shared<std::string>(pUpdateby);
    dirtyFlag_[9] = true;
}
void TmProgram::setUpdateby(std::string &&pUpdateby) noexcept
{
    updateby_ = std::make_shared<std::string>(std::move(pUpdateby));
    dirtyFlag_[9] = true;
}
void TmProgram::setUpdatebyToNull() noexcept
{
    updateby_.reset();
    dirtyFlag_[9] = true;
}

void TmProgram::updateId(const uint64_t id)
{
}

const std::vector<std::string> &TmProgram::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "programid",
        "programname",
        "runnopattern",
        "yeardigit",
        "rundigit",
        "resetcountpoint",
        "insertdate",
        "insertby",
        "updatedate",
        "updateby"
    };
    return inCols;
}

void TmProgram::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getProgramid())
        {
            binder << getValueOfProgramid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getProgramname())
        {
            binder << getValueOfProgramname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRunnopattern())
        {
            binder << getValueOfRunnopattern();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getYeardigit())
        {
            binder << getValueOfYeardigit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRundigit())
        {
            binder << getValueOfRundigit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getResetcountpoint())
        {
            binder << getValueOfResetcountpoint();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getInsertdate())
        {
            binder << getValueOfInsertdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getInsertby())
        {
            binder << getValueOfInsertby();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdatedate())
        {
            binder << getValueOfUpdatedate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getUpdateby())
        {
            binder << getValueOfUpdateby();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TmProgram::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    return ret;
}

void TmProgram::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getProgramid())
        {
            binder << getValueOfProgramid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getProgramname())
        {
            binder << getValueOfProgramname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRunnopattern())
        {
            binder << getValueOfRunnopattern();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getYeardigit())
        {
            binder << getValueOfYeardigit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRundigit())
        {
            binder << getValueOfRundigit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getResetcountpoint())
        {
            binder << getValueOfResetcountpoint();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getInsertdate())
        {
            binder << getValueOfInsertdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getInsertby())
        {
            binder << getValueOfInsertby();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdatedate())
        {
            binder << getValueOfUpdatedate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getUpdateby())
        {
            binder << getValueOfUpdateby();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TmProgram::toJson() const
{
    Json::Value ret;
    if(getProgramid())
    {
        ret["programid"]=getValueOfProgramid();
    }
    else
    {
        ret["programid"]=Json::Value();
    }
    if(getProgramname())
    {
        ret["programname"]=getValueOfProgramname();
    }
    else
    {
        ret["programname"]=Json::Value();
    }
    if(getRunnopattern())
    {
        ret["runnopattern"]=getValueOfRunnopattern();
    }
    else
    {
        ret["runnopattern"]=Json::Value();
    }
    if(getYeardigit())
    {
        ret["yeardigit"]=getValueOfYeardigit();
    }
    else
    {
        ret["yeardigit"]=Json::Value();
    }
    if(getRundigit())
    {
        ret["rundigit"]=getValueOfRundigit();
    }
    else
    {
        ret["rundigit"]=Json::Value();
    }
    if(getResetcountpoint())
    {
        ret["resetcountpoint"]=getValueOfResetcountpoint();
    }
    else
    {
        ret["resetcountpoint"]=Json::Value();
    }
    if(getInsertdate())
    {
        ret["insertdate"]=getInsertdate()->toDbStringLocal();
    }
    else
    {
        ret["insertdate"]=Json::Value();
    }
    if(getInsertby())
    {
        ret["insertby"]=getValueOfInsertby();
    }
    else
    {
        ret["insertby"]=Json::Value();
    }
    if(getUpdatedate())
    {
        ret["updatedate"]=getUpdatedate()->toDbStringLocal();
    }
    else
    {
        ret["updatedate"]=Json::Value();
    }
    if(getUpdateby())
    {
        ret["updateby"]=getValueOfUpdateby();
    }
    else
    {
        ret["updateby"]=Json::Value();
    }
    return ret;
}

Json::Value TmProgram::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 10)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getProgramid())
            {
                ret[pMasqueradingVector[0]]=getValueOfProgramid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getProgramname())
            {
                ret[pMasqueradingVector[1]]=getValueOfProgramname();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getRunnopattern())
            {
                ret[pMasqueradingVector[2]]=getValueOfRunnopattern();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getYeardigit())
            {
                ret[pMasqueradingVector[3]]=getValueOfYeardigit();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getRundigit())
            {
                ret[pMasqueradingVector[4]]=getValueOfRundigit();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getResetcountpoint())
            {
                ret[pMasqueradingVector[5]]=getValueOfResetcountpoint();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getInsertdate())
            {
                ret[pMasqueradingVector[6]]=getInsertdate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getInsertby())
            {
                ret[pMasqueradingVector[7]]=getValueOfInsertby();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUpdatedate())
            {
                ret[pMasqueradingVector[8]]=getUpdatedate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getUpdateby())
            {
                ret[pMasqueradingVector[9]]=getValueOfUpdateby();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getProgramid())
    {
        ret["programid"]=getValueOfProgramid();
    }
    else
    {
        ret["programid"]=Json::Value();
    }
    if(getProgramname())
    {
        ret["programname"]=getValueOfProgramname();
    }
    else
    {
        ret["programname"]=Json::Value();
    }
    if(getRunnopattern())
    {
        ret["runnopattern"]=getValueOfRunnopattern();
    }
    else
    {
        ret["runnopattern"]=Json::Value();
    }
    if(getYeardigit())
    {
        ret["yeardigit"]=getValueOfYeardigit();
    }
    else
    {
        ret["yeardigit"]=Json::Value();
    }
    if(getRundigit())
    {
        ret["rundigit"]=getValueOfRundigit();
    }
    else
    {
        ret["rundigit"]=Json::Value();
    }
    if(getResetcountpoint())
    {
        ret["resetcountpoint"]=getValueOfResetcountpoint();
    }
    else
    {
        ret["resetcountpoint"]=Json::Value();
    }
    if(getInsertdate())
    {
        ret["insertdate"]=getInsertdate()->toDbStringLocal();
    }
    else
    {
        ret["insertdate"]=Json::Value();
    }
    if(getInsertby())
    {
        ret["insertby"]=getValueOfInsertby();
    }
    else
    {
        ret["insertby"]=Json::Value();
    }
    if(getUpdatedate())
    {
        ret["updatedate"]=getUpdatedate()->toDbStringLocal();
    }
    else
    {
        ret["updatedate"]=Json::Value();
    }
    if(getUpdateby())
    {
        ret["updateby"]=getValueOfUpdateby();
    }
    else
    {
        ret["updateby"]=Json::Value();
    }
    return ret;
}

bool TmProgram::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("programid"))
    {
        if(!validJsonOfField(0, "programid", pJson["programid"], err, true))
            return false;
    }
    else
    {
        err="The programid column cannot be null";
        return false;
    }
    if(pJson.isMember("programname"))
    {
        if(!validJsonOfField(1, "programname", pJson["programname"], err, true))
            return false;
    }
    if(pJson.isMember("runnopattern"))
    {
        if(!validJsonOfField(2, "runnopattern", pJson["runnopattern"], err, true))
            return false;
    }
    if(pJson.isMember("yeardigit"))
    {
        if(!validJsonOfField(3, "yeardigit", pJson["yeardigit"], err, true))
            return false;
    }
    else
    {
        err="The yeardigit column cannot be null";
        return false;
    }
    if(pJson.isMember("rundigit"))
    {
        if(!validJsonOfField(4, "rundigit", pJson["rundigit"], err, true))
            return false;
    }
    else
    {
        err="The rundigit column cannot be null";
        return false;
    }
    if(pJson.isMember("resetcountpoint"))
    {
        if(!validJsonOfField(5, "resetcountpoint", pJson["resetcountpoint"], err, true))
            return false;
    }
    else
    {
        err="The resetcountpoint column cannot be null";
        return false;
    }
    if(pJson.isMember("insertdate"))
    {
        if(!validJsonOfField(6, "insertdate", pJson["insertdate"], err, true))
            return false;
    }
    else
    {
        err="The insertdate column cannot be null";
        return false;
    }
    if(pJson.isMember("insertby"))
    {
        if(!validJsonOfField(7, "insertby", pJson["insertby"], err, true))
            return false;
    }
    if(pJson.isMember("updatedate"))
    {
        if(!validJsonOfField(8, "updatedate", pJson["updatedate"], err, true))
            return false;
    }
    if(pJson.isMember("updateby"))
    {
        if(!validJsonOfField(9, "updateby", pJson["updateby"], err, true))
            return false;
    }
    return true;
}
bool TmProgram::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 10)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TmProgram::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("programid"))
    {
        if(!validJsonOfField(0, "programid", pJson["programid"], err, false))
            return false;
    }
    if(pJson.isMember("programname"))
    {
        if(!validJsonOfField(1, "programname", pJson["programname"], err, false))
            return false;
    }
    if(pJson.isMember("runnopattern"))
    {
        if(!validJsonOfField(2, "runnopattern", pJson["runnopattern"], err, false))
            return false;
    }
    if(pJson.isMember("yeardigit"))
    {
        if(!validJsonOfField(3, "yeardigit", pJson["yeardigit"], err, false))
            return false;
    }
    if(pJson.isMember("rundigit"))
    {
        if(!validJsonOfField(4, "rundigit", pJson["rundigit"], err, false))
            return false;
    }
    if(pJson.isMember("resetcountpoint"))
    {
        if(!validJsonOfField(5, "resetcountpoint", pJson["resetcountpoint"], err, false))
            return false;
    }
    if(pJson.isMember("insertdate"))
    {
        if(!validJsonOfField(6, "insertdate", pJson["insertdate"], err, false))
            return false;
    }
    if(pJson.isMember("insertby"))
    {
        if(!validJsonOfField(7, "insertby", pJson["insertby"], err, false))
            return false;
    }
    if(pJson.isMember("updatedate"))
    {
        if(!validJsonOfField(8, "updatedate", pJson["updatedate"], err, false))
            return false;
    }
    if(pJson.isMember("updateby"))
    {
        if(!validJsonOfField(9, "updateby", pJson["updateby"], err, false))
            return false;
    }
    return true;
}
bool TmProgram::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 10)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TmProgram::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
std::vector<TdRunnumber> TmProgram::getTdRunnumber(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from td_runnumber where programid = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *programid_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<TdRunnumber> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(TdRunnumber(row));
    }
    return ret;
}

void TmProgram::getTdRunnumber(const DbClientPtr &clientPtr,
                               const std::function<void(std::vector<TdRunnumber>)> &rcb,
                               const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from td_runnumber where programid = $1";
    *clientPtr << sql
               << *programid_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<TdRunnumber> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(TdRunnumber(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
TmResetcountpoint TmProgram::getTm_resetcountpoint(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tm_resetcountpoint where id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *resetcountpoint_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return TmResetcountpoint(r[0]);
}

void TmProgram::getTm_resetcountpoint(const DbClientPtr &clientPtr,
                                      const std::function<void(TmResetcountpoint)> &rcb,
                                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tm_resetcountpoint where id = $1";
    *clientPtr << sql
               << *resetcountpoint_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(TmResetcountpoint(r[0]));
                    }
               }
               >> ecb;
}
