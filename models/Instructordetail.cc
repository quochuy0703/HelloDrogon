/**
 *
 *  Instructordetail.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Instructordetail.h"
#include "Instructor.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::test;

const std::string Instructordetail::Cols::_id = "id";
const std::string Instructordetail::Cols::_youtubechannel = "youtubechannel";
const std::string Instructordetail::Cols::_hobby = "hobby";
const std::string Instructordetail::Cols::_instructorid = "instructorid";
const std::string Instructordetail::primaryKeyName = "";
const bool Instructordetail::hasPrimaryKey = false;
const std::string Instructordetail::tableName = "instructordetail";

const std::vector<typename Instructordetail::MetaData> Instructordetail::metaData_={
{"id","int32_t","integer",4,0,0,0},
{"youtubechannel","std::string","character varying",50,0,0,0},
{"hobby","std::string","character varying",50,0,0,0},
{"instructorid","int32_t","integer",4,0,0,0}
};
const std::string &Instructordetail::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Instructordetail::Instructordetail(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["youtubechannel"].isNull())
        {
            youtubechannel_=std::make_shared<std::string>(r["youtubechannel"].as<std::string>());
        }
        if(!r["hobby"].isNull())
        {
            hobby_=std::make_shared<std::string>(r["hobby"].as<std::string>());
        }
        if(!r["instructorid"].isNull())
        {
            instructorid_=std::make_shared<int32_t>(r["instructorid"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            youtubechannel_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            hobby_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            instructorid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Instructordetail::Instructordetail(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            youtubechannel_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            hobby_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            instructorid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

Instructordetail::Instructordetail(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("youtubechannel"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["youtubechannel"].isNull())
        {
            youtubechannel_=std::make_shared<std::string>(pJson["youtubechannel"].asString());
        }
    }
    if(pJson.isMember("hobby"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["hobby"].isNull())
        {
            hobby_=std::make_shared<std::string>(pJson["hobby"].asString());
        }
    }
    if(pJson.isMember("instructorid"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["instructorid"].isNull())
        {
            instructorid_=std::make_shared<int32_t>((int32_t)pJson["instructorid"].asInt64());
        }
    }
}

void Instructordetail::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            youtubechannel_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            hobby_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            instructorid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
}

void Instructordetail::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("youtubechannel"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["youtubechannel"].isNull())
        {
            youtubechannel_=std::make_shared<std::string>(pJson["youtubechannel"].asString());
        }
    }
    if(pJson.isMember("hobby"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["hobby"].isNull())
        {
            hobby_=std::make_shared<std::string>(pJson["hobby"].asString());
        }
    }
    if(pJson.isMember("instructorid"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["instructorid"].isNull())
        {
            instructorid_=std::make_shared<int32_t>((int32_t)pJson["instructorid"].asInt64());
        }
    }
}

const int32_t &Instructordetail::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Instructordetail::getId() const noexcept
{
    return id_;
}
void Instructordetail::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
void Instructordetail::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}

const std::string &Instructordetail::getValueOfYoutubechannel() const noexcept
{
    static const std::string defaultValue = std::string();
    if(youtubechannel_)
        return *youtubechannel_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Instructordetail::getYoutubechannel() const noexcept
{
    return youtubechannel_;
}
void Instructordetail::setYoutubechannel(const std::string &pYoutubechannel) noexcept
{
    youtubechannel_ = std::make_shared<std::string>(pYoutubechannel);
    dirtyFlag_[1] = true;
}
void Instructordetail::setYoutubechannel(std::string &&pYoutubechannel) noexcept
{
    youtubechannel_ = std::make_shared<std::string>(std::move(pYoutubechannel));
    dirtyFlag_[1] = true;
}
void Instructordetail::setYoutubechannelToNull() noexcept
{
    youtubechannel_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Instructordetail::getValueOfHobby() const noexcept
{
    static const std::string defaultValue = std::string();
    if(hobby_)
        return *hobby_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Instructordetail::getHobby() const noexcept
{
    return hobby_;
}
void Instructordetail::setHobby(const std::string &pHobby) noexcept
{
    hobby_ = std::make_shared<std::string>(pHobby);
    dirtyFlag_[2] = true;
}
void Instructordetail::setHobby(std::string &&pHobby) noexcept
{
    hobby_ = std::make_shared<std::string>(std::move(pHobby));
    dirtyFlag_[2] = true;
}
void Instructordetail::setHobbyToNull() noexcept
{
    hobby_.reset();
    dirtyFlag_[2] = true;
}

const int32_t &Instructordetail::getValueOfInstructorid() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(instructorid_)
        return *instructorid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Instructordetail::getInstructorid() const noexcept
{
    return instructorid_;
}
void Instructordetail::setInstructorid(const int32_t &pInstructorid) noexcept
{
    instructorid_ = std::make_shared<int32_t>(pInstructorid);
    dirtyFlag_[3] = true;
}
void Instructordetail::setInstructoridToNull() noexcept
{
    instructorid_.reset();
    dirtyFlag_[3] = true;
}

void Instructordetail::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Instructordetail::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "youtubechannel",
        "hobby",
        "instructorid"
    };
    return inCols;
}

void Instructordetail::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getYoutubechannel())
        {
            binder << getValueOfYoutubechannel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getHobby())
        {
            binder << getValueOfHobby();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getInstructorid())
        {
            binder << getValueOfInstructorid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Instructordetail::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void Instructordetail::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getYoutubechannel())
        {
            binder << getValueOfYoutubechannel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getHobby())
        {
            binder << getValueOfHobby();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getInstructorid())
        {
            binder << getValueOfInstructorid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Instructordetail::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getYoutubechannel())
    {
        ret["youtubechannel"]=getValueOfYoutubechannel();
    }
    else
    {
        ret["youtubechannel"]=Json::Value();
    }
    if(getHobby())
    {
        ret["hobby"]=getValueOfHobby();
    }
    else
    {
        ret["hobby"]=Json::Value();
    }
    if(getInstructorid())
    {
        ret["instructorid"]=getValueOfInstructorid();
    }
    else
    {
        ret["instructorid"]=Json::Value();
    }
    return ret;
}

Json::Value Instructordetail::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getYoutubechannel())
            {
                ret[pMasqueradingVector[1]]=getValueOfYoutubechannel();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getHobby())
            {
                ret[pMasqueradingVector[2]]=getValueOfHobby();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getInstructorid())
            {
                ret[pMasqueradingVector[3]]=getValueOfInstructorid();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getYoutubechannel())
    {
        ret["youtubechannel"]=getValueOfYoutubechannel();
    }
    else
    {
        ret["youtubechannel"]=Json::Value();
    }
    if(getHobby())
    {
        ret["hobby"]=getValueOfHobby();
    }
    else
    {
        ret["hobby"]=Json::Value();
    }
    if(getInstructorid())
    {
        ret["instructorid"]=getValueOfInstructorid();
    }
    else
    {
        ret["instructorid"]=Json::Value();
    }
    return ret;
}

bool Instructordetail::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("youtubechannel"))
    {
        if(!validJsonOfField(1, "youtubechannel", pJson["youtubechannel"], err, true))
            return false;
    }
    if(pJson.isMember("hobby"))
    {
        if(!validJsonOfField(2, "hobby", pJson["hobby"], err, true))
            return false;
    }
    if(pJson.isMember("instructorid"))
    {
        if(!validJsonOfField(3, "instructorid", pJson["instructorid"], err, true))
            return false;
    }
    return true;
}
bool Instructordetail::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                          const std::vector<std::string> &pMasqueradingVector,
                                                          std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Instructordetail::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    if(pJson.isMember("youtubechannel"))
    {
        if(!validJsonOfField(1, "youtubechannel", pJson["youtubechannel"], err, false))
            return false;
    }
    if(pJson.isMember("hobby"))
    {
        if(!validJsonOfField(2, "hobby", pJson["hobby"], err, false))
            return false;
    }
    if(pJson.isMember("instructorid"))
    {
        if(!validJsonOfField(3, "instructorid", pJson["instructorid"], err, false))
            return false;
    }
    return true;
}
bool Instructordetail::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Instructordetail::validJsonOfField(size_t index,
                                        const std::string &fieldName,
                                        const Json::Value &pJson,
                                        std::string &err,
                                        bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Instructor Instructordetail::getInstructor(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from instructor where id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *instructorid_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Instructor(r[0]);
}

void Instructordetail::getInstructor(const DbClientPtr &clientPtr,
                                     const std::function<void(Instructor)> &rcb,
                                     const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from instructor where id = $1";
    *clientPtr << sql
               << *instructorid_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Instructor(r[0]));
                    }
               }
               >> ecb;
}
