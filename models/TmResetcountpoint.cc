/**
 *
 *  TmResetcountpoint.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TmResetcountpoint.h"
#include "TmProgram.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::test;

const std::string TmResetcountpoint::Cols::_id = "id";
const std::string TmResetcountpoint::Cols::_point = "point";
const std::string TmResetcountpoint::Cols::_pointpattern = "pointpattern";
const std::string TmResetcountpoint::primaryKeyName = "";
const bool TmResetcountpoint::hasPrimaryKey = false;
const std::string TmResetcountpoint::tableName = "tm_resetcountpoint";

const std::vector<typename TmResetcountpoint::MetaData> TmResetcountpoint::metaData_={
{"id","int32_t","integer",4,0,0,1},
{"point","std::string","character varying",20,0,0,0},
{"pointpattern","std::string","character varying",10,0,0,0}
};
const std::string &TmResetcountpoint::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TmResetcountpoint::TmResetcountpoint(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["point"].isNull())
        {
            point_=std::make_shared<std::string>(r["point"].as<std::string>());
        }
        if(!r["pointpattern"].isNull())
        {
            pointpattern_=std::make_shared<std::string>(r["pointpattern"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            point_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            pointpattern_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

TmResetcountpoint::TmResetcountpoint(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            point_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            pointpattern_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

TmResetcountpoint::TmResetcountpoint(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("point"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["point"].isNull())
        {
            point_=std::make_shared<std::string>(pJson["point"].asString());
        }
    }
    if(pJson.isMember("pointpattern"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["pointpattern"].isNull())
        {
            pointpattern_=std::make_shared<std::string>(pJson["pointpattern"].asString());
        }
    }
}

void TmResetcountpoint::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            point_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            pointpattern_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void TmResetcountpoint::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("point"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["point"].isNull())
        {
            point_=std::make_shared<std::string>(pJson["point"].asString());
        }
    }
    if(pJson.isMember("pointpattern"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["pointpattern"].isNull())
        {
            pointpattern_=std::make_shared<std::string>(pJson["pointpattern"].asString());
        }
    }
}

const int32_t &TmResetcountpoint::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TmResetcountpoint::getId() const noexcept
{
    return id_;
}
void TmResetcountpoint::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}

const std::string &TmResetcountpoint::getValueOfPoint() const noexcept
{
    static const std::string defaultValue = std::string();
    if(point_)
        return *point_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TmResetcountpoint::getPoint() const noexcept
{
    return point_;
}
void TmResetcountpoint::setPoint(const std::string &pPoint) noexcept
{
    point_ = std::make_shared<std::string>(pPoint);
    dirtyFlag_[1] = true;
}
void TmResetcountpoint::setPoint(std::string &&pPoint) noexcept
{
    point_ = std::make_shared<std::string>(std::move(pPoint));
    dirtyFlag_[1] = true;
}
void TmResetcountpoint::setPointToNull() noexcept
{
    point_.reset();
    dirtyFlag_[1] = true;
}

const std::string &TmResetcountpoint::getValueOfPointpattern() const noexcept
{
    static const std::string defaultValue = std::string();
    if(pointpattern_)
        return *pointpattern_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TmResetcountpoint::getPointpattern() const noexcept
{
    return pointpattern_;
}
void TmResetcountpoint::setPointpattern(const std::string &pPointpattern) noexcept
{
    pointpattern_ = std::make_shared<std::string>(pPointpattern);
    dirtyFlag_[2] = true;
}
void TmResetcountpoint::setPointpattern(std::string &&pPointpattern) noexcept
{
    pointpattern_ = std::make_shared<std::string>(std::move(pPointpattern));
    dirtyFlag_[2] = true;
}
void TmResetcountpoint::setPointpatternToNull() noexcept
{
    pointpattern_.reset();
    dirtyFlag_[2] = true;
}

void TmResetcountpoint::updateId(const uint64_t id)
{
}

const std::vector<std::string> &TmResetcountpoint::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "point",
        "pointpattern"
    };
    return inCols;
}

void TmResetcountpoint::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPoint())
        {
            binder << getValueOfPoint();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPointpattern())
        {
            binder << getValueOfPointpattern();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TmResetcountpoint::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void TmResetcountpoint::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPoint())
        {
            binder << getValueOfPoint();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPointpattern())
        {
            binder << getValueOfPointpattern();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TmResetcountpoint::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPoint())
    {
        ret["point"]=getValueOfPoint();
    }
    else
    {
        ret["point"]=Json::Value();
    }
    if(getPointpattern())
    {
        ret["pointpattern"]=getValueOfPointpattern();
    }
    else
    {
        ret["pointpattern"]=Json::Value();
    }
    return ret;
}

Json::Value TmResetcountpoint::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPoint())
            {
                ret[pMasqueradingVector[1]]=getValueOfPoint();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getPointpattern())
            {
                ret[pMasqueradingVector[2]]=getValueOfPointpattern();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPoint())
    {
        ret["point"]=getValueOfPoint();
    }
    else
    {
        ret["point"]=Json::Value();
    }
    if(getPointpattern())
    {
        ret["pointpattern"]=getValueOfPointpattern();
    }
    else
    {
        ret["pointpattern"]=Json::Value();
    }
    return ret;
}

bool TmResetcountpoint::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    else
    {
        err="The id column cannot be null";
        return false;
    }
    if(pJson.isMember("point"))
    {
        if(!validJsonOfField(1, "point", pJson["point"], err, true))
            return false;
    }
    if(pJson.isMember("pointpattern"))
    {
        if(!validJsonOfField(2, "pointpattern", pJson["pointpattern"], err, true))
            return false;
    }
    return true;
}
bool TmResetcountpoint::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TmResetcountpoint::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    if(pJson.isMember("point"))
    {
        if(!validJsonOfField(1, "point", pJson["point"], err, false))
            return false;
    }
    if(pJson.isMember("pointpattern"))
    {
        if(!validJsonOfField(2, "pointpattern", pJson["pointpattern"], err, false))
            return false;
    }
    return true;
}
bool TmResetcountpoint::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TmResetcountpoint::validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson,
                                         std::string &err,
                                         bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
std::vector<TmProgram> TmResetcountpoint::getTmProgram(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tm_program where resetcountpoint = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *id_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<TmProgram> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(TmProgram(row));
    }
    return ret;
}

void TmResetcountpoint::getTmProgram(const DbClientPtr &clientPtr,
                                     const std::function<void(std::vector<TmProgram>)> &rcb,
                                     const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tm_program where resetcountpoint = $1";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<TmProgram> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(TmProgram(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
