/**
 *
 *  Systemaccounts.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace drogon_test
{

class Systemaccounts
{
  public:
    struct Cols
    {
        static const std::string _AccountId;
        static const std::string _Username;
        static const std::string _PasswordHash;
        static const std::string _SecurityStamp;
        static const std::string _DisplayName;
        static const std::string _Avatar;
        static const std::string _Type;
        static const std::string _AccessFailedCount;
        static const std::string _Email;
        static const std::string _IsEmailConfirmed;
        static const std::string _PhoneNumber;
        static const std::string _IsPhoneNumberConfirmed;
        static const std::string _TwoFactorEnabled;
        static const std::string _SessionId;
        static const std::string _Status;
        static const std::string _PrivateKey;
        static const std::string _IsFirstTimeLogin;
        static const std::string _IsHRReference;
        static const std::string _Session;
        static const std::string _CreatedDate;
        static const std::string _CreatedBy;
        static const std::string _UpdatedDate;
        static const std::string _UpdatedBy;
        static const std::string _SectionId;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = void;
    int getPrimaryKey() const { assert(false); return 0; }

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Systemaccounts(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Systemaccounts(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Systemaccounts(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Systemaccounts() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column AccountId  */
    ///Get the value of the column AccountId, returns the default value if the column is null
    const std::string &getValueOfAccountid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAccountid() const noexcept;
    ///Set the value of the column AccountId
    void setAccountid(const std::string &pAccountid) noexcept;
    void setAccountid(std::string &&pAccountid) noexcept;
    void setAccountidToNull() noexcept;

    /**  For column Username  */
    ///Get the value of the column Username, returns the default value if the column is null
    const std::string &getValueOfUsername() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUsername() const noexcept;
    ///Set the value of the column Username
    void setUsername(const std::string &pUsername) noexcept;
    void setUsername(std::string &&pUsername) noexcept;
    void setUsernameToNull() noexcept;

    /**  For column PasswordHash  */
    ///Get the value of the column PasswordHash, returns the default value if the column is null
    const std::string &getValueOfPasswordhash() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPasswordhash() const noexcept;
    ///Set the value of the column PasswordHash
    void setPasswordhash(const std::string &pPasswordhash) noexcept;
    void setPasswordhash(std::string &&pPasswordhash) noexcept;
    void setPasswordhashToNull() noexcept;

    /**  For column SecurityStamp  */
    ///Get the value of the column SecurityStamp, returns the default value if the column is null
    const std::string &getValueOfSecuritystamp() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSecuritystamp() const noexcept;
    ///Set the value of the column SecurityStamp
    void setSecuritystamp(const std::string &pSecuritystamp) noexcept;
    void setSecuritystamp(std::string &&pSecuritystamp) noexcept;
    void setSecuritystampToNull() noexcept;

    /**  For column DisplayName  */
    ///Get the value of the column DisplayName, returns the default value if the column is null
    const std::string &getValueOfDisplayname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDisplayname() const noexcept;
    ///Set the value of the column DisplayName
    void setDisplayname(const std::string &pDisplayname) noexcept;
    void setDisplayname(std::string &&pDisplayname) noexcept;
    void setDisplaynameToNull() noexcept;

    /**  For column Avatar  */
    ///Get the value of the column Avatar, returns the default value if the column is null
    const std::string &getValueOfAvatar() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAvatar() const noexcept;
    ///Set the value of the column Avatar
    void setAvatar(const std::string &pAvatar) noexcept;
    void setAvatar(std::string &&pAvatar) noexcept;
    void setAvatarToNull() noexcept;

    /**  For column Type  */
    ///Get the value of the column Type, returns the default value if the column is null
    const int8_t &getValueOfType() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getType() const noexcept;
    ///Set the value of the column Type
    void setType(const int8_t &pType) noexcept;

    /**  For column AccessFailedCount  */
    ///Get the value of the column AccessFailedCount, returns the default value if the column is null
    const int16_t &getValueOfAccessfailedcount() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int16_t> &getAccessfailedcount() const noexcept;
    ///Set the value of the column AccessFailedCount
    void setAccessfailedcount(const int16_t &pAccessfailedcount) noexcept;
    void setAccessfailedcountToNull() noexcept;

    /**  For column Email  */
    ///Get the value of the column Email, returns the default value if the column is null
    const std::string &getValueOfEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEmail() const noexcept;
    ///Set the value of the column Email
    void setEmail(const std::string &pEmail) noexcept;
    void setEmail(std::string &&pEmail) noexcept;
    void setEmailToNull() noexcept;

    /**  For column IsEmailConfirmed  */
    ///Get the value of the column IsEmailConfirmed, returns the default value if the column is null
    const std::string &getValueOfIsemailconfirmed() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIsemailconfirmed() const noexcept;
    ///Set the value of the column IsEmailConfirmed
    void setIsemailconfirmed(const std::string &pIsemailconfirmed) noexcept;
    void setIsemailconfirmed(std::string &&pIsemailconfirmed) noexcept;
    void setIsemailconfirmedToNull() noexcept;

    /**  For column PhoneNumber  */
    ///Get the value of the column PhoneNumber, returns the default value if the column is null
    const std::string &getValueOfPhonenumber() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPhonenumber() const noexcept;
    ///Set the value of the column PhoneNumber
    void setPhonenumber(const std::string &pPhonenumber) noexcept;
    void setPhonenumber(std::string &&pPhonenumber) noexcept;
    void setPhonenumberToNull() noexcept;

    /**  For column IsPhoneNumberConfirmed  */
    ///Get the value of the column IsPhoneNumberConfirmed, returns the default value if the column is null
    const std::string &getValueOfIsphonenumberconfirmed() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIsphonenumberconfirmed() const noexcept;
    ///Set the value of the column IsPhoneNumberConfirmed
    void setIsphonenumberconfirmed(const std::string &pIsphonenumberconfirmed) noexcept;
    void setIsphonenumberconfirmed(std::string &&pIsphonenumberconfirmed) noexcept;
    void setIsphonenumberconfirmedToNull() noexcept;

    /**  For column TwoFactorEnabled  */
    ///Get the value of the column TwoFactorEnabled, returns the default value if the column is null
    const std::string &getValueOfTwofactorenabled() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTwofactorenabled() const noexcept;
    ///Set the value of the column TwoFactorEnabled
    void setTwofactorenabled(const std::string &pTwofactorenabled) noexcept;
    void setTwofactorenabled(std::string &&pTwofactorenabled) noexcept;
    void setTwofactorenabledToNull() noexcept;

    /**  For column SessionId  */
    ///Get the value of the column SessionId, returns the default value if the column is null
    const std::string &getValueOfSessionid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSessionid() const noexcept;
    ///Set the value of the column SessionId
    void setSessionid(const std::string &pSessionid) noexcept;
    void setSessionid(std::string &&pSessionid) noexcept;
    void setSessionidToNull() noexcept;

    /**  For column Status  */
    ///Get the value of the column Status, returns the default value if the column is null
    const int8_t &getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getStatus() const noexcept;
    ///Set the value of the column Status
    void setStatus(const int8_t &pStatus) noexcept;
    void setStatusToNull() noexcept;

    /**  For column PrivateKey  */
    ///Get the value of the column PrivateKey, returns the default value if the column is null
    const std::string &getValueOfPrivatekey() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPrivatekey() const noexcept;
    ///Set the value of the column PrivateKey
    void setPrivatekey(const std::string &pPrivatekey) noexcept;
    void setPrivatekey(std::string &&pPrivatekey) noexcept;
    void setPrivatekeyToNull() noexcept;

    /**  For column IsFirstTimeLogin  */
    ///Get the value of the column IsFirstTimeLogin, returns the default value if the column is null
    const std::string &getValueOfIsfirsttimelogin() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIsfirsttimelogin() const noexcept;
    ///Set the value of the column IsFirstTimeLogin
    void setIsfirsttimelogin(const std::string &pIsfirsttimelogin) noexcept;
    void setIsfirsttimelogin(std::string &&pIsfirsttimelogin) noexcept;
    void setIsfirsttimeloginToNull() noexcept;

    /**  For column IsHRReference  */
    ///Get the value of the column IsHRReference, returns the default value if the column is null
    const std::string &getValueOfIshrreference() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIshrreference() const noexcept;
    ///Set the value of the column IsHRReference
    void setIshrreference(const std::string &pIshrreference) noexcept;
    void setIshrreference(std::string &&pIshrreference) noexcept;
    void setIshrreferenceToNull() noexcept;

    /**  For column Session  */
    ///Get the value of the column Session, returns the default value if the column is null
    const std::string &getValueOfSession() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSession() const noexcept;
    ///Set the value of the column Session
    void setSession(const std::string &pSession) noexcept;
    void setSession(std::string &&pSession) noexcept;
    void setSessionToNull() noexcept;

    /**  For column CreatedDate  */
    ///Get the value of the column CreatedDate, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreateddate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreateddate() const noexcept;
    ///Set the value of the column CreatedDate
    void setCreateddate(const ::trantor::Date &pCreateddate) noexcept;

    /**  For column CreatedBy  */
    ///Get the value of the column CreatedBy, returns the default value if the column is null
    const std::string &getValueOfCreatedby() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCreatedby() const noexcept;
    ///Set the value of the column CreatedBy
    void setCreatedby(const std::string &pCreatedby) noexcept;
    void setCreatedby(std::string &&pCreatedby) noexcept;
    void setCreatedbyToNull() noexcept;

    /**  For column UpdatedDate  */
    ///Get the value of the column UpdatedDate, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdateddate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdateddate() const noexcept;
    ///Set the value of the column UpdatedDate
    void setUpdateddate(const ::trantor::Date &pUpdateddate) noexcept;
    void setUpdateddateToNull() noexcept;

    /**  For column UpdatedBy  */
    ///Get the value of the column UpdatedBy, returns the default value if the column is null
    const std::string &getValueOfUpdatedby() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUpdatedby() const noexcept;
    ///Set the value of the column UpdatedBy
    void setUpdatedby(const std::string &pUpdatedby) noexcept;
    void setUpdatedby(std::string &&pUpdatedby) noexcept;
    void setUpdatedbyToNull() noexcept;

    /**  For column SectionId  */
    ///Get the value of the column SectionId, returns the default value if the column is null
    const std::string &getValueOfSectionid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSectionid() const noexcept;
    ///Set the value of the column SectionId
    void setSectionid(const std::string &pSectionid) noexcept;
    void setSectionid(std::string &&pSectionid) noexcept;
    void setSectionidToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 24;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Systemaccounts>;
    friend drogon::orm::BaseBuilder<Systemaccounts, true, true>;
    friend drogon::orm::BaseBuilder<Systemaccounts, true, false>;
    friend drogon::orm::BaseBuilder<Systemaccounts, false, true>;
    friend drogon::orm::BaseBuilder<Systemaccounts, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Systemaccounts>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<std::string> accountid_;
    std::shared_ptr<std::string> username_;
    std::shared_ptr<std::string> passwordhash_;
    std::shared_ptr<std::string> securitystamp_;
    std::shared_ptr<std::string> displayname_;
    std::shared_ptr<std::string> avatar_;
    std::shared_ptr<int8_t> type_;
    std::shared_ptr<int16_t> accessfailedcount_;
    std::shared_ptr<std::string> email_;
    std::shared_ptr<std::string> isemailconfirmed_;
    std::shared_ptr<std::string> phonenumber_;
    std::shared_ptr<std::string> isphonenumberconfirmed_;
    std::shared_ptr<std::string> twofactorenabled_;
    std::shared_ptr<std::string> sessionid_;
    std::shared_ptr<int8_t> status_;
    std::shared_ptr<std::string> privatekey_;
    std::shared_ptr<std::string> isfirsttimelogin_;
    std::shared_ptr<std::string> ishrreference_;
    std::shared_ptr<std::string> session_;
    std::shared_ptr<::trantor::Date> createddate_;
    std::shared_ptr<std::string> createdby_;
    std::shared_ptr<::trantor::Date> updateddate_;
    std::shared_ptr<std::string> updatedby_;
    std::shared_ptr<std::string> sectionid_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[24]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "AccountId,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "Username,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "PasswordHash,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "SecurityStamp,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "DisplayName,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "Avatar,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "Type,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "AccessFailedCount,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "Email,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "IsEmailConfirmed,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "PhoneNumber,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "IsPhoneNumberConfirmed,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "TwoFactorEnabled,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "SessionId,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "Status,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "PrivateKey,";
            ++parametersCount;
        }
        if(dirtyFlag_[16])
        {
            sql += "IsFirstTimeLogin,";
            ++parametersCount;
        }
        if(dirtyFlag_[17])
        {
            sql += "IsHRReference,";
            ++parametersCount;
        }
        if(dirtyFlag_[18])
        {
            sql += "Session,";
            ++parametersCount;
        }
        if(dirtyFlag_[19])
        {
            sql += "CreatedDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[20])
        {
            sql += "CreatedBy,";
            ++parametersCount;
        }
        if(dirtyFlag_[21])
        {
            sql += "UpdatedDate,";
            ++parametersCount;
        }
        if(dirtyFlag_[22])
        {
            sql += "UpdatedBy,";
            ++parametersCount;
        }
        if(dirtyFlag_[23])
        {
            sql += "SectionId,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        if(dirtyFlag_[0])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[21])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[22])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[23])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace drogon_test
} // namespace drogon_model
