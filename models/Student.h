/**
 *
 *  Student.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace test
{

class Student
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _created_date;
        static const std::string _last_modified_date;
        static const std::string _batch;
        static const std::string _class_section;
        static const std::string _name;
        static const std::string _semester;
        static const std::string _year;
        static const std::string _course_id;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = int64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Student(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Student(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Student(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Student() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int64_t &pId) noexcept;

    /**  For column created_date  */
    ///Get the value of the column created_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedDate() const noexcept;
    ///Set the value of the column created_date
    void setCreatedDate(const ::trantor::Date &pCreatedDate) noexcept;
    void setCreatedDateToNull() noexcept;

    /**  For column last_modified_date  */
    ///Get the value of the column last_modified_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfLastModifiedDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getLastModifiedDate() const noexcept;
    ///Set the value of the column last_modified_date
    void setLastModifiedDate(const ::trantor::Date &pLastModifiedDate) noexcept;
    void setLastModifiedDateToNull() noexcept;

    /**  For column batch  */
    ///Get the value of the column batch, returns the default value if the column is null
    const int64_t &getValueOfBatch() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getBatch() const noexcept;
    ///Set the value of the column batch
    void setBatch(const int64_t &pBatch) noexcept;
    void setBatchToNull() noexcept;

    /**  For column class_section  */
    ///Get the value of the column class_section, returns the default value if the column is null
    const std::string &getValueOfClassSection() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getClassSection() const noexcept;
    ///Set the value of the column class_section
    void setClassSection(const std::string &pClassSection) noexcept;
    void setClassSection(std::string &&pClassSection) noexcept;
    void setClassSectionToNull() noexcept;

    /**  For column name  */
    ///Get the value of the column name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;
    ///Set the value of the column name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;
    void setNameToNull() noexcept;

    /**  For column semester  */
    ///Get the value of the column semester, returns the default value if the column is null
    const int64_t &getValueOfSemester() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getSemester() const noexcept;
    ///Set the value of the column semester
    void setSemester(const int64_t &pSemester) noexcept;
    void setSemesterToNull() noexcept;

    /**  For column year  */
    ///Get the value of the column year, returns the default value if the column is null
    const int64_t &getValueOfYear() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getYear() const noexcept;
    ///Set the value of the column year
    void setYear(const int64_t &pYear) noexcept;
    void setYearToNull() noexcept;

    /**  For column course_id  */
    ///Get the value of the column course_id, returns the default value if the column is null
    const int64_t &getValueOfCourseId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getCourseId() const noexcept;
    ///Set the value of the column course_id
    void setCourseId(const int64_t &pCourseId) noexcept;
    void setCourseIdToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 9;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Student>;
    friend drogon::orm::BaseBuilder<Student, true, true>;
    friend drogon::orm::BaseBuilder<Student, true, false>;
    friend drogon::orm::BaseBuilder<Student, false, true>;
    friend drogon::orm::BaseBuilder<Student, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Student>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> id_;
    std::shared_ptr<::trantor::Date> createdDate_;
    std::shared_ptr<::trantor::Date> lastModifiedDate_;
    std::shared_ptr<int64_t> batch_;
    std::shared_ptr<std::string> classSection_;
    std::shared_ptr<std::string> name_;
    std::shared_ptr<int64_t> semester_;
    std::shared_ptr<int64_t> year_;
    std::shared_ptr<int64_t> courseId_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[9]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = $1";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = $1";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "id,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "created_date,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "last_modified_date,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "batch,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "class_section,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "name,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "semester,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "year,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "course_id,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        if(dirtyFlag_[0])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[1])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace test
} // namespace drogon_model
