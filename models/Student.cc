/**
 *
 *  Student.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Student.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::test;

const std::string Student::Cols::_id = "id";
const std::string Student::Cols::_created_date = "created_date";
const std::string Student::Cols::_last_modified_date = "last_modified_date";
const std::string Student::Cols::_batch = "batch";
const std::string Student::Cols::_class_section = "class_section";
const std::string Student::Cols::_name = "name";
const std::string Student::Cols::_semester = "semester";
const std::string Student::Cols::_year = "year";
const std::string Student::Cols::_course_id = "course_id";
const std::string Student::primaryKeyName = "";
const bool Student::hasPrimaryKey = false;
const std::string Student::tableName = "student";

const std::vector<typename Student::MetaData> Student::metaData_={
{"id","int64_t","bigint",8,0,0,1},
{"created_date","::trantor::Date","timestamp without time zone",0,0,0,0},
{"last_modified_date","::trantor::Date","timestamp without time zone",0,0,0,0},
{"batch","int64_t","bigint",8,0,0,0},
{"class_section","std::string","character varying",255,0,0,0},
{"name","std::string","character varying",255,0,0,0},
{"semester","int64_t","bigint",8,0,0,0},
{"year","int64_t","bigint",8,0,0,0},
{"course_id","int64_t","bigint",8,0,0,0}
};
const std::string &Student::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Student::Student(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["created_date"].isNull())
        {
            auto timeStr = r["created_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["last_modified_date"].isNull())
        {
            auto timeStr = r["last_modified_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastModifiedDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["batch"].isNull())
        {
            batch_=std::make_shared<int64_t>(r["batch"].as<int64_t>());
        }
        if(!r["class_section"].isNull())
        {
            classSection_=std::make_shared<std::string>(r["class_section"].as<std::string>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["semester"].isNull())
        {
            semester_=std::make_shared<int64_t>(r["semester"].as<int64_t>());
        }
        if(!r["year"].isNull())
        {
            year_=std::make_shared<int64_t>(r["year"].as<int64_t>());
        }
        if(!r["course_id"].isNull())
        {
            courseId_=std::make_shared<int64_t>(r["course_id"].as<int64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastModifiedDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            batch_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            classSection_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            semester_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            year_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            courseId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
    }

}

Student::Student(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastModifiedDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            batch_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            classSection_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            semester_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            year_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            courseId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
}

Student::Student(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("created_date"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["created_date"].isNull())
        {
            auto timeStr = pJson["created_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("last_modified_date"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["last_modified_date"].isNull())
        {
            auto timeStr = pJson["last_modified_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastModifiedDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("batch"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["batch"].isNull())
        {
            batch_=std::make_shared<int64_t>((int64_t)pJson["batch"].asInt64());
        }
    }
    if(pJson.isMember("class_section"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["class_section"].isNull())
        {
            classSection_=std::make_shared<std::string>(pJson["class_section"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("semester"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["semester"].isNull())
        {
            semester_=std::make_shared<int64_t>((int64_t)pJson["semester"].asInt64());
        }
    }
    if(pJson.isMember("year"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["year"].isNull())
        {
            year_=std::make_shared<int64_t>((int64_t)pJson["year"].asInt64());
        }
    }
    if(pJson.isMember("course_id"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["course_id"].isNull())
        {
            courseId_=std::make_shared<int64_t>((int64_t)pJson["course_id"].asInt64());
        }
    }
}

void Student::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastModifiedDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            batch_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            classSection_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            semester_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            year_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            courseId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
}

void Student::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("created_date"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["created_date"].isNull())
        {
            auto timeStr = pJson["created_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("last_modified_date"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["last_modified_date"].isNull())
        {
            auto timeStr = pJson["last_modified_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastModifiedDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("batch"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["batch"].isNull())
        {
            batch_=std::make_shared<int64_t>((int64_t)pJson["batch"].asInt64());
        }
    }
    if(pJson.isMember("class_section"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["class_section"].isNull())
        {
            classSection_=std::make_shared<std::string>(pJson["class_section"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("semester"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["semester"].isNull())
        {
            semester_=std::make_shared<int64_t>((int64_t)pJson["semester"].asInt64());
        }
    }
    if(pJson.isMember("year"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["year"].isNull())
        {
            year_=std::make_shared<int64_t>((int64_t)pJson["year"].asInt64());
        }
    }
    if(pJson.isMember("course_id"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["course_id"].isNull())
        {
            courseId_=std::make_shared<int64_t>((int64_t)pJson["course_id"].asInt64());
        }
    }
}

const int64_t &Student::getValueOfId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Student::getId() const noexcept
{
    return id_;
}
void Student::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}

const ::trantor::Date &Student::getValueOfCreatedDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdDate_)
        return *createdDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Student::getCreatedDate() const noexcept
{
    return createdDate_;
}
void Student::setCreatedDate(const ::trantor::Date &pCreatedDate) noexcept
{
    createdDate_ = std::make_shared<::trantor::Date>(pCreatedDate);
    dirtyFlag_[1] = true;
}
void Student::setCreatedDateToNull() noexcept
{
    createdDate_.reset();
    dirtyFlag_[1] = true;
}

const ::trantor::Date &Student::getValueOfLastModifiedDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(lastModifiedDate_)
        return *lastModifiedDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Student::getLastModifiedDate() const noexcept
{
    return lastModifiedDate_;
}
void Student::setLastModifiedDate(const ::trantor::Date &pLastModifiedDate) noexcept
{
    lastModifiedDate_ = std::make_shared<::trantor::Date>(pLastModifiedDate);
    dirtyFlag_[2] = true;
}
void Student::setLastModifiedDateToNull() noexcept
{
    lastModifiedDate_.reset();
    dirtyFlag_[2] = true;
}

const int64_t &Student::getValueOfBatch() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(batch_)
        return *batch_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Student::getBatch() const noexcept
{
    return batch_;
}
void Student::setBatch(const int64_t &pBatch) noexcept
{
    batch_ = std::make_shared<int64_t>(pBatch);
    dirtyFlag_[3] = true;
}
void Student::setBatchToNull() noexcept
{
    batch_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Student::getValueOfClassSection() const noexcept
{
    static const std::string defaultValue = std::string();
    if(classSection_)
        return *classSection_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Student::getClassSection() const noexcept
{
    return classSection_;
}
void Student::setClassSection(const std::string &pClassSection) noexcept
{
    classSection_ = std::make_shared<std::string>(pClassSection);
    dirtyFlag_[4] = true;
}
void Student::setClassSection(std::string &&pClassSection) noexcept
{
    classSection_ = std::make_shared<std::string>(std::move(pClassSection));
    dirtyFlag_[4] = true;
}
void Student::setClassSectionToNull() noexcept
{
    classSection_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Student::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Student::getName() const noexcept
{
    return name_;
}
void Student::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[5] = true;
}
void Student::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[5] = true;
}
void Student::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[5] = true;
}

const int64_t &Student::getValueOfSemester() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(semester_)
        return *semester_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Student::getSemester() const noexcept
{
    return semester_;
}
void Student::setSemester(const int64_t &pSemester) noexcept
{
    semester_ = std::make_shared<int64_t>(pSemester);
    dirtyFlag_[6] = true;
}
void Student::setSemesterToNull() noexcept
{
    semester_.reset();
    dirtyFlag_[6] = true;
}

const int64_t &Student::getValueOfYear() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(year_)
        return *year_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Student::getYear() const noexcept
{
    return year_;
}
void Student::setYear(const int64_t &pYear) noexcept
{
    year_ = std::make_shared<int64_t>(pYear);
    dirtyFlag_[7] = true;
}
void Student::setYearToNull() noexcept
{
    year_.reset();
    dirtyFlag_[7] = true;
}

const int64_t &Student::getValueOfCourseId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(courseId_)
        return *courseId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Student::getCourseId() const noexcept
{
    return courseId_;
}
void Student::setCourseId(const int64_t &pCourseId) noexcept
{
    courseId_ = std::make_shared<int64_t>(pCourseId);
    dirtyFlag_[8] = true;
}
void Student::setCourseIdToNull() noexcept
{
    courseId_.reset();
    dirtyFlag_[8] = true;
}

void Student::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Student::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "created_date",
        "last_modified_date",
        "batch",
        "class_section",
        "name",
        "semester",
        "year",
        "course_id"
    };
    return inCols;
}

void Student::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCreatedDate())
        {
            binder << getValueOfCreatedDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastModifiedDate())
        {
            binder << getValueOfLastModifiedDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getBatch())
        {
            binder << getValueOfBatch();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getClassSection())
        {
            binder << getValueOfClassSection();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSemester())
        {
            binder << getValueOfSemester();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getYear())
        {
            binder << getValueOfYear();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCourseId())
        {
            binder << getValueOfCourseId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Student::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Student::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCreatedDate())
        {
            binder << getValueOfCreatedDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastModifiedDate())
        {
            binder << getValueOfLastModifiedDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getBatch())
        {
            binder << getValueOfBatch();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getClassSection())
        {
            binder << getValueOfClassSection();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSemester())
        {
            binder << getValueOfSemester();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getYear())
        {
            binder << getValueOfYear();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCourseId())
        {
            binder << getValueOfCourseId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Student::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreatedDate())
    {
        ret["created_date"]=getCreatedDate()->toDbStringLocal();
    }
    else
    {
        ret["created_date"]=Json::Value();
    }
    if(getLastModifiedDate())
    {
        ret["last_modified_date"]=getLastModifiedDate()->toDbStringLocal();
    }
    else
    {
        ret["last_modified_date"]=Json::Value();
    }
    if(getBatch())
    {
        ret["batch"]=(Json::Int64)getValueOfBatch();
    }
    else
    {
        ret["batch"]=Json::Value();
    }
    if(getClassSection())
    {
        ret["class_section"]=getValueOfClassSection();
    }
    else
    {
        ret["class_section"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getSemester())
    {
        ret["semester"]=(Json::Int64)getValueOfSemester();
    }
    else
    {
        ret["semester"]=Json::Value();
    }
    if(getYear())
    {
        ret["year"]=(Json::Int64)getValueOfYear();
    }
    else
    {
        ret["year"]=Json::Value();
    }
    if(getCourseId())
    {
        ret["course_id"]=(Json::Int64)getValueOfCourseId();
    }
    else
    {
        ret["course_id"]=Json::Value();
    }
    return ret;
}

Json::Value Student::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCreatedDate())
            {
                ret[pMasqueradingVector[1]]=getCreatedDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getLastModifiedDate())
            {
                ret[pMasqueradingVector[2]]=getLastModifiedDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getBatch())
            {
                ret[pMasqueradingVector[3]]=(Json::Int64)getValueOfBatch();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getClassSection())
            {
                ret[pMasqueradingVector[4]]=getValueOfClassSection();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[5]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getSemester())
            {
                ret[pMasqueradingVector[6]]=(Json::Int64)getValueOfSemester();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getYear())
            {
                ret[pMasqueradingVector[7]]=(Json::Int64)getValueOfYear();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getCourseId())
            {
                ret[pMasqueradingVector[8]]=(Json::Int64)getValueOfCourseId();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getCreatedDate())
    {
        ret["created_date"]=getCreatedDate()->toDbStringLocal();
    }
    else
    {
        ret["created_date"]=Json::Value();
    }
    if(getLastModifiedDate())
    {
        ret["last_modified_date"]=getLastModifiedDate()->toDbStringLocal();
    }
    else
    {
        ret["last_modified_date"]=Json::Value();
    }
    if(getBatch())
    {
        ret["batch"]=(Json::Int64)getValueOfBatch();
    }
    else
    {
        ret["batch"]=Json::Value();
    }
    if(getClassSection())
    {
        ret["class_section"]=getValueOfClassSection();
    }
    else
    {
        ret["class_section"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getSemester())
    {
        ret["semester"]=(Json::Int64)getValueOfSemester();
    }
    else
    {
        ret["semester"]=Json::Value();
    }
    if(getYear())
    {
        ret["year"]=(Json::Int64)getValueOfYear();
    }
    else
    {
        ret["year"]=Json::Value();
    }
    if(getCourseId())
    {
        ret["course_id"]=(Json::Int64)getValueOfCourseId();
    }
    else
    {
        ret["course_id"]=Json::Value();
    }
    return ret;
}

bool Student::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    else
    {
        err="The id column cannot be null";
        return false;
    }
    if(pJson.isMember("created_date"))
    {
        if(!validJsonOfField(1, "created_date", pJson["created_date"], err, true))
            return false;
    }
    if(pJson.isMember("last_modified_date"))
    {
        if(!validJsonOfField(2, "last_modified_date", pJson["last_modified_date"], err, true))
            return false;
    }
    if(pJson.isMember("batch"))
    {
        if(!validJsonOfField(3, "batch", pJson["batch"], err, true))
            return false;
    }
    if(pJson.isMember("class_section"))
    {
        if(!validJsonOfField(4, "class_section", pJson["class_section"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(5, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("semester"))
    {
        if(!validJsonOfField(6, "semester", pJson["semester"], err, true))
            return false;
    }
    if(pJson.isMember("year"))
    {
        if(!validJsonOfField(7, "year", pJson["year"], err, true))
            return false;
    }
    if(pJson.isMember("course_id"))
    {
        if(!validJsonOfField(8, "course_id", pJson["course_id"], err, true))
            return false;
    }
    return true;
}
bool Student::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Student::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    if(pJson.isMember("created_date"))
    {
        if(!validJsonOfField(1, "created_date", pJson["created_date"], err, false))
            return false;
    }
    if(pJson.isMember("last_modified_date"))
    {
        if(!validJsonOfField(2, "last_modified_date", pJson["last_modified_date"], err, false))
            return false;
    }
    if(pJson.isMember("batch"))
    {
        if(!validJsonOfField(3, "batch", pJson["batch"], err, false))
            return false;
    }
    if(pJson.isMember("class_section"))
    {
        if(!validJsonOfField(4, "class_section", pJson["class_section"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(5, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("semester"))
    {
        if(!validJsonOfField(6, "semester", pJson["semester"], err, false))
            return false;
    }
    if(pJson.isMember("year"))
    {
        if(!validJsonOfField(7, "year", pJson["year"], err, false))
            return false;
    }
    if(pJson.isMember("course_id"))
    {
        if(!validJsonOfField(8, "course_id", pJson["course_id"], err, false))
            return false;
    }
    return true;
}
bool Student::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Student::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
