/**
 *
 *  Systemaccounts.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Systemaccounts.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::test;

const std::string Systemaccounts::Cols::_accountid = "accountid";
const std::string Systemaccounts::Cols::_username = "username";
const std::string Systemaccounts::Cols::_passwordhash = "passwordhash";
const std::string Systemaccounts::Cols::_securitystamp = "securitystamp";
const std::string Systemaccounts::Cols::_displayname = "displayname";
const std::string Systemaccounts::Cols::_avatar = "avatar";
const std::string Systemaccounts::Cols::_type = "type";
const std::string Systemaccounts::Cols::_accessfailedcount = "accessfailedcount";
const std::string Systemaccounts::Cols::_email = "email";
const std::string Systemaccounts::Cols::_isemailconfirmed = "isemailconfirmed";
const std::string Systemaccounts::Cols::_phonenumber = "phonenumber";
const std::string Systemaccounts::Cols::_isphonenumberconfirmed = "isphonenumberconfirmed";
const std::string Systemaccounts::Cols::_twofactorenabled = "twofactorenabled";
const std::string Systemaccounts::Cols::_sessionid = "sessionid";
const std::string Systemaccounts::Cols::_status = "status";
const std::string Systemaccounts::Cols::_privatekey = "privatekey";
const std::string Systemaccounts::Cols::_isfirsttimelogin = "isfirsttimelogin";
const std::string Systemaccounts::Cols::_ishrreference = "ishrreference";
const std::string Systemaccounts::Cols::_session = "session";
const std::string Systemaccounts::Cols::_createddate = "createddate";
const std::string Systemaccounts::Cols::_createdby = "createdby";
const std::string Systemaccounts::Cols::_updateddate = "updateddate";
const std::string Systemaccounts::Cols::_updatedby = "updatedby";
const std::string Systemaccounts::primaryKeyName = "";
const bool Systemaccounts::hasPrimaryKey = false;
const std::string Systemaccounts::tableName = "systemaccounts";

const std::vector<typename Systemaccounts::MetaData> Systemaccounts::metaData_={
{"accountid","std::string","uuid",0,0,0,0},
{"username","std::string","character varying",30,0,0,0},
{"passwordhash","std::string","character varying",100,0,0,0},
{"securitystamp","std::string","character varying",100,0,0,0},
{"displayname","std::string","character varying",200,0,0,0},
{"avatar","std::string","character varying",100,0,0,0},
{"type","int32_t","integer",4,0,0,1},
{"accessfailedcount","short","smallint",2,0,0,0},
{"email","std::string","character varying",100,0,0,0},
{"isemailconfirmed","std::string","bit",0,0,0,0},
{"phonenumber","std::string","character varying",50,0,0,0},
{"isphonenumberconfirmed","std::string","bit",0,0,0,0},
{"twofactorenabled","std::string","bit",0,0,0,0},
{"sessionid","std::string","uuid",0,0,0,0},
{"status","int32_t","integer",4,0,0,0},
{"privatekey","std::string","character varying",100,0,0,0},
{"isfirsttimelogin","std::string","bit",0,0,0,0},
{"ishrreference","std::string","bit",0,0,0,0},
{"session","std::string","character varying",0,0,0,0},
{"createddate","::trantor::Date","timestamp without time zone",0,0,0,1},
{"createdby","std::string","character varying",30,0,0,0},
{"updateddate","::trantor::Date","timestamp without time zone",0,0,0,0},
{"updatedby","std::string","character varying",30,0,0,0}
};
const std::string &Systemaccounts::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Systemaccounts::Systemaccounts(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["accountid"].isNull())
        {
            accountid_=std::make_shared<std::string>(r["accountid"].as<std::string>());
        }
        if(!r["username"].isNull())
        {
            username_=std::make_shared<std::string>(r["username"].as<std::string>());
        }
        if(!r["passwordhash"].isNull())
        {
            passwordhash_=std::make_shared<std::string>(r["passwordhash"].as<std::string>());
        }
        if(!r["securitystamp"].isNull())
        {
            securitystamp_=std::make_shared<std::string>(r["securitystamp"].as<std::string>());
        }
        if(!r["displayname"].isNull())
        {
            displayname_=std::make_shared<std::string>(r["displayname"].as<std::string>());
        }
        if(!r["avatar"].isNull())
        {
            avatar_=std::make_shared<std::string>(r["avatar"].as<std::string>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<int32_t>(r["type"].as<int32_t>());
        }
        if(!r["accessfailedcount"].isNull())
        {
            accessfailedcount_=std::make_shared<short>(r["accessfailedcount"].as<short>());
        }
        if(!r["email"].isNull())
        {
            email_=std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if(!r["isemailconfirmed"].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(r["isemailconfirmed"].as<std::string>());
        }
        if(!r["phonenumber"].isNull())
        {
            phonenumber_=std::make_shared<std::string>(r["phonenumber"].as<std::string>());
        }
        if(!r["isphonenumberconfirmed"].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(r["isphonenumberconfirmed"].as<std::string>());
        }
        if(!r["twofactorenabled"].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(r["twofactorenabled"].as<std::string>());
        }
        if(!r["sessionid"].isNull())
        {
            sessionid_=std::make_shared<std::string>(r["sessionid"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<int32_t>(r["status"].as<int32_t>());
        }
        if(!r["privatekey"].isNull())
        {
            privatekey_=std::make_shared<std::string>(r["privatekey"].as<std::string>());
        }
        if(!r["isfirsttimelogin"].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(r["isfirsttimelogin"].as<std::string>());
        }
        if(!r["ishrreference"].isNull())
        {
            ishrreference_=std::make_shared<std::string>(r["ishrreference"].as<std::string>());
        }
        if(!r["session"].isNull())
        {
            session_=std::make_shared<std::string>(r["session"].as<std::string>());
        }
        if(!r["createddate"].isNull())
        {
            auto timeStr = r["createddate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["createdby"].isNull())
        {
            createdby_=std::make_shared<std::string>(r["createdby"].as<std::string>());
        }
        if(!r["updateddate"].isNull())
        {
            auto timeStr = r["updateddate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updatedby"].isNull())
        {
            updatedby_=std::make_shared<std::string>(r["updatedby"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 23 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            accountid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            username_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            passwordhash_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            securitystamp_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            displayname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            avatar_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            type_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            accessfailedcount_=std::make_shared<short>(r[index].as<short>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            phonenumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            sessionid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            status_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            privatekey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            ishrreference_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            session_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            createdby_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            updatedby_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Systemaccounts::Systemaccounts(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 23)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            passwordhash_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            securitystamp_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            avatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            type_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            accessfailedcount_=std::make_shared<short>((short)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            sessionid_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            status_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            privatekey_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            ishrreference_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            session_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[19]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            createdby_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[21]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            updatedby_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
}

Systemaccounts::Systemaccounts(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("accountid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["accountid"].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson["accountid"].asString());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("passwordhash"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["passwordhash"].isNull())
        {
            passwordhash_=std::make_shared<std::string>(pJson["passwordhash"].asString());
        }
    }
    if(pJson.isMember("securitystamp"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["securitystamp"].isNull())
        {
            securitystamp_=std::make_shared<std::string>(pJson["securitystamp"].asString());
        }
    }
    if(pJson.isMember("displayname"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["displayname"].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson["displayname"].asString());
        }
    }
    if(pJson.isMember("avatar"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["avatar"].isNull())
        {
            avatar_=std::make_shared<std::string>(pJson["avatar"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<int32_t>((int32_t)pJson["type"].asInt64());
        }
    }
    if(pJson.isMember("accessfailedcount"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["accessfailedcount"].isNull())
        {
            accessfailedcount_=std::make_shared<short>((short)pJson["accessfailedcount"].asInt64());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("isemailconfirmed"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["isemailconfirmed"].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(pJson["isemailconfirmed"].asString());
        }
    }
    if(pJson.isMember("phonenumber"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["phonenumber"].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson["phonenumber"].asString());
        }
    }
    if(pJson.isMember("isphonenumberconfirmed"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["isphonenumberconfirmed"].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(pJson["isphonenumberconfirmed"].asString());
        }
    }
    if(pJson.isMember("twofactorenabled"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["twofactorenabled"].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(pJson["twofactorenabled"].asString());
        }
    }
    if(pJson.isMember("sessionid"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["sessionid"].isNull())
        {
            sessionid_=std::make_shared<std::string>(pJson["sessionid"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<int32_t>((int32_t)pJson["status"].asInt64());
        }
    }
    if(pJson.isMember("privatekey"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["privatekey"].isNull())
        {
            privatekey_=std::make_shared<std::string>(pJson["privatekey"].asString());
        }
    }
    if(pJson.isMember("isfirsttimelogin"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["isfirsttimelogin"].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(pJson["isfirsttimelogin"].asString());
        }
    }
    if(pJson.isMember("ishrreference"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["ishrreference"].isNull())
        {
            ishrreference_=std::make_shared<std::string>(pJson["ishrreference"].asString());
        }
    }
    if(pJson.isMember("session"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["session"].isNull())
        {
            session_=std::make_shared<std::string>(pJson["session"].asString());
        }
    }
    if(pJson.isMember("createddate"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["createddate"].isNull())
        {
            auto timeStr = pJson["createddate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("createdby"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["createdby"].isNull())
        {
            createdby_=std::make_shared<std::string>(pJson["createdby"].asString());
        }
    }
    if(pJson.isMember("updateddate"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["updateddate"].isNull())
        {
            auto timeStr = pJson["updateddate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedby"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["updatedby"].isNull())
        {
            updatedby_=std::make_shared<std::string>(pJson["updatedby"].asString());
        }
    }
}

void Systemaccounts::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 23)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            passwordhash_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            securitystamp_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            avatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            type_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            accessfailedcount_=std::make_shared<short>((short)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            sessionid_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            status_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            privatekey_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            ishrreference_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            session_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[19]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            createdby_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[21]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            updatedby_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
}

void Systemaccounts::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("accountid"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["accountid"].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson["accountid"].asString());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("passwordhash"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["passwordhash"].isNull())
        {
            passwordhash_=std::make_shared<std::string>(pJson["passwordhash"].asString());
        }
    }
    if(pJson.isMember("securitystamp"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["securitystamp"].isNull())
        {
            securitystamp_=std::make_shared<std::string>(pJson["securitystamp"].asString());
        }
    }
    if(pJson.isMember("displayname"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["displayname"].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson["displayname"].asString());
        }
    }
    if(pJson.isMember("avatar"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["avatar"].isNull())
        {
            avatar_=std::make_shared<std::string>(pJson["avatar"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<int32_t>((int32_t)pJson["type"].asInt64());
        }
    }
    if(pJson.isMember("accessfailedcount"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["accessfailedcount"].isNull())
        {
            accessfailedcount_=std::make_shared<short>((short)pJson["accessfailedcount"].asInt64());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("isemailconfirmed"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["isemailconfirmed"].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(pJson["isemailconfirmed"].asString());
        }
    }
    if(pJson.isMember("phonenumber"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["phonenumber"].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson["phonenumber"].asString());
        }
    }
    if(pJson.isMember("isphonenumberconfirmed"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["isphonenumberconfirmed"].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(pJson["isphonenumberconfirmed"].asString());
        }
    }
    if(pJson.isMember("twofactorenabled"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["twofactorenabled"].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(pJson["twofactorenabled"].asString());
        }
    }
    if(pJson.isMember("sessionid"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["sessionid"].isNull())
        {
            sessionid_=std::make_shared<std::string>(pJson["sessionid"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<int32_t>((int32_t)pJson["status"].asInt64());
        }
    }
    if(pJson.isMember("privatekey"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["privatekey"].isNull())
        {
            privatekey_=std::make_shared<std::string>(pJson["privatekey"].asString());
        }
    }
    if(pJson.isMember("isfirsttimelogin"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["isfirsttimelogin"].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(pJson["isfirsttimelogin"].asString());
        }
    }
    if(pJson.isMember("ishrreference"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["ishrreference"].isNull())
        {
            ishrreference_=std::make_shared<std::string>(pJson["ishrreference"].asString());
        }
    }
    if(pJson.isMember("session"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["session"].isNull())
        {
            session_=std::make_shared<std::string>(pJson["session"].asString());
        }
    }
    if(pJson.isMember("createddate"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["createddate"].isNull())
        {
            auto timeStr = pJson["createddate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("createdby"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["createdby"].isNull())
        {
            createdby_=std::make_shared<std::string>(pJson["createdby"].asString());
        }
    }
    if(pJson.isMember("updateddate"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["updateddate"].isNull())
        {
            auto timeStr = pJson["updateddate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedby"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["updatedby"].isNull())
        {
            updatedby_=std::make_shared<std::string>(pJson["updatedby"].asString());
        }
    }
}

const std::string &Systemaccounts::getValueOfAccountid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(accountid_)
        return *accountid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getAccountid() const noexcept
{
    return accountid_;
}
void Systemaccounts::setAccountid(const std::string &pAccountid) noexcept
{
    accountid_ = std::make_shared<std::string>(pAccountid);
    dirtyFlag_[0] = true;
}
void Systemaccounts::setAccountid(std::string &&pAccountid) noexcept
{
    accountid_ = std::make_shared<std::string>(std::move(pAccountid));
    dirtyFlag_[0] = true;
}
void Systemaccounts::setAccountidToNull() noexcept
{
    accountid_.reset();
    dirtyFlag_[0] = true;
}

const std::string &Systemaccounts::getValueOfUsername() const noexcept
{
    static const std::string defaultValue = std::string();
    if(username_)
        return *username_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getUsername() const noexcept
{
    return username_;
}
void Systemaccounts::setUsername(const std::string &pUsername) noexcept
{
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[1] = true;
}
void Systemaccounts::setUsername(std::string &&pUsername) noexcept
{
    username_ = std::make_shared<std::string>(std::move(pUsername));
    dirtyFlag_[1] = true;
}
void Systemaccounts::setUsernameToNull() noexcept
{
    username_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Systemaccounts::getValueOfPasswordhash() const noexcept
{
    static const std::string defaultValue = std::string();
    if(passwordhash_)
        return *passwordhash_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getPasswordhash() const noexcept
{
    return passwordhash_;
}
void Systemaccounts::setPasswordhash(const std::string &pPasswordhash) noexcept
{
    passwordhash_ = std::make_shared<std::string>(pPasswordhash);
    dirtyFlag_[2] = true;
}
void Systemaccounts::setPasswordhash(std::string &&pPasswordhash) noexcept
{
    passwordhash_ = std::make_shared<std::string>(std::move(pPasswordhash));
    dirtyFlag_[2] = true;
}
void Systemaccounts::setPasswordhashToNull() noexcept
{
    passwordhash_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Systemaccounts::getValueOfSecuritystamp() const noexcept
{
    static const std::string defaultValue = std::string();
    if(securitystamp_)
        return *securitystamp_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getSecuritystamp() const noexcept
{
    return securitystamp_;
}
void Systemaccounts::setSecuritystamp(const std::string &pSecuritystamp) noexcept
{
    securitystamp_ = std::make_shared<std::string>(pSecuritystamp);
    dirtyFlag_[3] = true;
}
void Systemaccounts::setSecuritystamp(std::string &&pSecuritystamp) noexcept
{
    securitystamp_ = std::make_shared<std::string>(std::move(pSecuritystamp));
    dirtyFlag_[3] = true;
}
void Systemaccounts::setSecuritystampToNull() noexcept
{
    securitystamp_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Systemaccounts::getValueOfDisplayname() const noexcept
{
    static const std::string defaultValue = std::string();
    if(displayname_)
        return *displayname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getDisplayname() const noexcept
{
    return displayname_;
}
void Systemaccounts::setDisplayname(const std::string &pDisplayname) noexcept
{
    displayname_ = std::make_shared<std::string>(pDisplayname);
    dirtyFlag_[4] = true;
}
void Systemaccounts::setDisplayname(std::string &&pDisplayname) noexcept
{
    displayname_ = std::make_shared<std::string>(std::move(pDisplayname));
    dirtyFlag_[4] = true;
}
void Systemaccounts::setDisplaynameToNull() noexcept
{
    displayname_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Systemaccounts::getValueOfAvatar() const noexcept
{
    static const std::string defaultValue = std::string();
    if(avatar_)
        return *avatar_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getAvatar() const noexcept
{
    return avatar_;
}
void Systemaccounts::setAvatar(const std::string &pAvatar) noexcept
{
    avatar_ = std::make_shared<std::string>(pAvatar);
    dirtyFlag_[5] = true;
}
void Systemaccounts::setAvatar(std::string &&pAvatar) noexcept
{
    avatar_ = std::make_shared<std::string>(std::move(pAvatar));
    dirtyFlag_[5] = true;
}
void Systemaccounts::setAvatarToNull() noexcept
{
    avatar_.reset();
    dirtyFlag_[5] = true;
}

const int32_t &Systemaccounts::getValueOfType() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Systemaccounts::getType() const noexcept
{
    return type_;
}
void Systemaccounts::setType(const int32_t &pType) noexcept
{
    type_ = std::make_shared<int32_t>(pType);
    dirtyFlag_[6] = true;
}

const short &Systemaccounts::getValueOfAccessfailedcount() const noexcept
{
    static const short defaultValue = short();
    if(accessfailedcount_)
        return *accessfailedcount_;
    return defaultValue;
}
const std::shared_ptr<short> &Systemaccounts::getAccessfailedcount() const noexcept
{
    return accessfailedcount_;
}
void Systemaccounts::setAccessfailedcount(const short &pAccessfailedcount) noexcept
{
    accessfailedcount_ = std::make_shared<short>(pAccessfailedcount);
    dirtyFlag_[7] = true;
}
void Systemaccounts::setAccessfailedcountToNull() noexcept
{
    accessfailedcount_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Systemaccounts::getValueOfEmail() const noexcept
{
    static const std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getEmail() const noexcept
{
    return email_;
}
void Systemaccounts::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[8] = true;
}
void Systemaccounts::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[8] = true;
}
void Systemaccounts::setEmailToNull() noexcept
{
    email_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Systemaccounts::getValueOfIsemailconfirmed() const noexcept
{
    static const std::string defaultValue = std::string();
    if(isemailconfirmed_)
        return *isemailconfirmed_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getIsemailconfirmed() const noexcept
{
    return isemailconfirmed_;
}
void Systemaccounts::setIsemailconfirmed(const std::string &pIsemailconfirmed) noexcept
{
    isemailconfirmed_ = std::make_shared<std::string>(pIsemailconfirmed);
    dirtyFlag_[9] = true;
}
void Systemaccounts::setIsemailconfirmed(std::string &&pIsemailconfirmed) noexcept
{
    isemailconfirmed_ = std::make_shared<std::string>(std::move(pIsemailconfirmed));
    dirtyFlag_[9] = true;
}
void Systemaccounts::setIsemailconfirmedToNull() noexcept
{
    isemailconfirmed_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Systemaccounts::getValueOfPhonenumber() const noexcept
{
    static const std::string defaultValue = std::string();
    if(phonenumber_)
        return *phonenumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getPhonenumber() const noexcept
{
    return phonenumber_;
}
void Systemaccounts::setPhonenumber(const std::string &pPhonenumber) noexcept
{
    phonenumber_ = std::make_shared<std::string>(pPhonenumber);
    dirtyFlag_[10] = true;
}
void Systemaccounts::setPhonenumber(std::string &&pPhonenumber) noexcept
{
    phonenumber_ = std::make_shared<std::string>(std::move(pPhonenumber));
    dirtyFlag_[10] = true;
}
void Systemaccounts::setPhonenumberToNull() noexcept
{
    phonenumber_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Systemaccounts::getValueOfIsphonenumberconfirmed() const noexcept
{
    static const std::string defaultValue = std::string();
    if(isphonenumberconfirmed_)
        return *isphonenumberconfirmed_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getIsphonenumberconfirmed() const noexcept
{
    return isphonenumberconfirmed_;
}
void Systemaccounts::setIsphonenumberconfirmed(const std::string &pIsphonenumberconfirmed) noexcept
{
    isphonenumberconfirmed_ = std::make_shared<std::string>(pIsphonenumberconfirmed);
    dirtyFlag_[11] = true;
}
void Systemaccounts::setIsphonenumberconfirmed(std::string &&pIsphonenumberconfirmed) noexcept
{
    isphonenumberconfirmed_ = std::make_shared<std::string>(std::move(pIsphonenumberconfirmed));
    dirtyFlag_[11] = true;
}
void Systemaccounts::setIsphonenumberconfirmedToNull() noexcept
{
    isphonenumberconfirmed_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Systemaccounts::getValueOfTwofactorenabled() const noexcept
{
    static const std::string defaultValue = std::string();
    if(twofactorenabled_)
        return *twofactorenabled_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getTwofactorenabled() const noexcept
{
    return twofactorenabled_;
}
void Systemaccounts::setTwofactorenabled(const std::string &pTwofactorenabled) noexcept
{
    twofactorenabled_ = std::make_shared<std::string>(pTwofactorenabled);
    dirtyFlag_[12] = true;
}
void Systemaccounts::setTwofactorenabled(std::string &&pTwofactorenabled) noexcept
{
    twofactorenabled_ = std::make_shared<std::string>(std::move(pTwofactorenabled));
    dirtyFlag_[12] = true;
}
void Systemaccounts::setTwofactorenabledToNull() noexcept
{
    twofactorenabled_.reset();
    dirtyFlag_[12] = true;
}

const std::string &Systemaccounts::getValueOfSessionid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(sessionid_)
        return *sessionid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getSessionid() const noexcept
{
    return sessionid_;
}
void Systemaccounts::setSessionid(const std::string &pSessionid) noexcept
{
    sessionid_ = std::make_shared<std::string>(pSessionid);
    dirtyFlag_[13] = true;
}
void Systemaccounts::setSessionid(std::string &&pSessionid) noexcept
{
    sessionid_ = std::make_shared<std::string>(std::move(pSessionid));
    dirtyFlag_[13] = true;
}
void Systemaccounts::setSessionidToNull() noexcept
{
    sessionid_.reset();
    dirtyFlag_[13] = true;
}

const int32_t &Systemaccounts::getValueOfStatus() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Systemaccounts::getStatus() const noexcept
{
    return status_;
}
void Systemaccounts::setStatus(const int32_t &pStatus) noexcept
{
    status_ = std::make_shared<int32_t>(pStatus);
    dirtyFlag_[14] = true;
}
void Systemaccounts::setStatusToNull() noexcept
{
    status_.reset();
    dirtyFlag_[14] = true;
}

const std::string &Systemaccounts::getValueOfPrivatekey() const noexcept
{
    static const std::string defaultValue = std::string();
    if(privatekey_)
        return *privatekey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getPrivatekey() const noexcept
{
    return privatekey_;
}
void Systemaccounts::setPrivatekey(const std::string &pPrivatekey) noexcept
{
    privatekey_ = std::make_shared<std::string>(pPrivatekey);
    dirtyFlag_[15] = true;
}
void Systemaccounts::setPrivatekey(std::string &&pPrivatekey) noexcept
{
    privatekey_ = std::make_shared<std::string>(std::move(pPrivatekey));
    dirtyFlag_[15] = true;
}
void Systemaccounts::setPrivatekeyToNull() noexcept
{
    privatekey_.reset();
    dirtyFlag_[15] = true;
}

const std::string &Systemaccounts::getValueOfIsfirsttimelogin() const noexcept
{
    static const std::string defaultValue = std::string();
    if(isfirsttimelogin_)
        return *isfirsttimelogin_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getIsfirsttimelogin() const noexcept
{
    return isfirsttimelogin_;
}
void Systemaccounts::setIsfirsttimelogin(const std::string &pIsfirsttimelogin) noexcept
{
    isfirsttimelogin_ = std::make_shared<std::string>(pIsfirsttimelogin);
    dirtyFlag_[16] = true;
}
void Systemaccounts::setIsfirsttimelogin(std::string &&pIsfirsttimelogin) noexcept
{
    isfirsttimelogin_ = std::make_shared<std::string>(std::move(pIsfirsttimelogin));
    dirtyFlag_[16] = true;
}
void Systemaccounts::setIsfirsttimeloginToNull() noexcept
{
    isfirsttimelogin_.reset();
    dirtyFlag_[16] = true;
}

const std::string &Systemaccounts::getValueOfIshrreference() const noexcept
{
    static const std::string defaultValue = std::string();
    if(ishrreference_)
        return *ishrreference_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getIshrreference() const noexcept
{
    return ishrreference_;
}
void Systemaccounts::setIshrreference(const std::string &pIshrreference) noexcept
{
    ishrreference_ = std::make_shared<std::string>(pIshrreference);
    dirtyFlag_[17] = true;
}
void Systemaccounts::setIshrreference(std::string &&pIshrreference) noexcept
{
    ishrreference_ = std::make_shared<std::string>(std::move(pIshrreference));
    dirtyFlag_[17] = true;
}
void Systemaccounts::setIshrreferenceToNull() noexcept
{
    ishrreference_.reset();
    dirtyFlag_[17] = true;
}

const std::string &Systemaccounts::getValueOfSession() const noexcept
{
    static const std::string defaultValue = std::string();
    if(session_)
        return *session_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getSession() const noexcept
{
    return session_;
}
void Systemaccounts::setSession(const std::string &pSession) noexcept
{
    session_ = std::make_shared<std::string>(pSession);
    dirtyFlag_[18] = true;
}
void Systemaccounts::setSession(std::string &&pSession) noexcept
{
    session_ = std::make_shared<std::string>(std::move(pSession));
    dirtyFlag_[18] = true;
}
void Systemaccounts::setSessionToNull() noexcept
{
    session_.reset();
    dirtyFlag_[18] = true;
}

const ::trantor::Date &Systemaccounts::getValueOfCreateddate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createddate_)
        return *createddate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Systemaccounts::getCreateddate() const noexcept
{
    return createddate_;
}
void Systemaccounts::setCreateddate(const ::trantor::Date &pCreateddate) noexcept
{
    createddate_ = std::make_shared<::trantor::Date>(pCreateddate);
    dirtyFlag_[19] = true;
}

const std::string &Systemaccounts::getValueOfCreatedby() const noexcept
{
    static const std::string defaultValue = std::string();
    if(createdby_)
        return *createdby_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getCreatedby() const noexcept
{
    return createdby_;
}
void Systemaccounts::setCreatedby(const std::string &pCreatedby) noexcept
{
    createdby_ = std::make_shared<std::string>(pCreatedby);
    dirtyFlag_[20] = true;
}
void Systemaccounts::setCreatedby(std::string &&pCreatedby) noexcept
{
    createdby_ = std::make_shared<std::string>(std::move(pCreatedby));
    dirtyFlag_[20] = true;
}
void Systemaccounts::setCreatedbyToNull() noexcept
{
    createdby_.reset();
    dirtyFlag_[20] = true;
}

const ::trantor::Date &Systemaccounts::getValueOfUpdateddate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updateddate_)
        return *updateddate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Systemaccounts::getUpdateddate() const noexcept
{
    return updateddate_;
}
void Systemaccounts::setUpdateddate(const ::trantor::Date &pUpdateddate) noexcept
{
    updateddate_ = std::make_shared<::trantor::Date>(pUpdateddate);
    dirtyFlag_[21] = true;
}
void Systemaccounts::setUpdateddateToNull() noexcept
{
    updateddate_.reset();
    dirtyFlag_[21] = true;
}

const std::string &Systemaccounts::getValueOfUpdatedby() const noexcept
{
    static const std::string defaultValue = std::string();
    if(updatedby_)
        return *updatedby_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getUpdatedby() const noexcept
{
    return updatedby_;
}
void Systemaccounts::setUpdatedby(const std::string &pUpdatedby) noexcept
{
    updatedby_ = std::make_shared<std::string>(pUpdatedby);
    dirtyFlag_[22] = true;
}
void Systemaccounts::setUpdatedby(std::string &&pUpdatedby) noexcept
{
    updatedby_ = std::make_shared<std::string>(std::move(pUpdatedby));
    dirtyFlag_[22] = true;
}
void Systemaccounts::setUpdatedbyToNull() noexcept
{
    updatedby_.reset();
    dirtyFlag_[22] = true;
}

void Systemaccounts::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Systemaccounts::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "accountid",
        "username",
        "passwordhash",
        "securitystamp",
        "displayname",
        "avatar",
        "type",
        "accessfailedcount",
        "email",
        "isemailconfirmed",
        "phonenumber",
        "isphonenumberconfirmed",
        "twofactorenabled",
        "sessionid",
        "status",
        "privatekey",
        "isfirsttimelogin",
        "ishrreference",
        "session",
        "createddate",
        "createdby",
        "updateddate",
        "updatedby"
    };
    return inCols;
}

void Systemaccounts::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPasswordhash())
        {
            binder << getValueOfPasswordhash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSecuritystamp())
        {
            binder << getValueOfSecuritystamp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDisplayname())
        {
            binder << getValueOfDisplayname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAvatar())
        {
            binder << getValueOfAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAccessfailedcount())
        {
            binder << getValueOfAccessfailedcount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsemailconfirmed())
        {
            binder << getValueOfIsemailconfirmed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPhonenumber())
        {
            binder << getValueOfPhonenumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsphonenumberconfirmed())
        {
            binder << getValueOfIsphonenumberconfirmed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getTwofactorenabled())
        {
            binder << getValueOfTwofactorenabled();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getSessionid())
        {
            binder << getValueOfSessionid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getPrivatekey())
        {
            binder << getValueOfPrivatekey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getIsfirsttimelogin())
        {
            binder << getValueOfIsfirsttimelogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getIshrreference())
        {
            binder << getValueOfIshrreference();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getSession())
        {
            binder << getValueOfSession();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getCreateddate())
        {
            binder << getValueOfCreateddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getCreatedby())
        {
            binder << getValueOfCreatedby();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getUpdateddate())
        {
            binder << getValueOfUpdateddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getUpdatedby())
        {
            binder << getValueOfUpdatedby();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Systemaccounts::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    return ret;
}

void Systemaccounts::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPasswordhash())
        {
            binder << getValueOfPasswordhash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSecuritystamp())
        {
            binder << getValueOfSecuritystamp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDisplayname())
        {
            binder << getValueOfDisplayname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAvatar())
        {
            binder << getValueOfAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAccessfailedcount())
        {
            binder << getValueOfAccessfailedcount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsemailconfirmed())
        {
            binder << getValueOfIsemailconfirmed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPhonenumber())
        {
            binder << getValueOfPhonenumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsphonenumberconfirmed())
        {
            binder << getValueOfIsphonenumberconfirmed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getTwofactorenabled())
        {
            binder << getValueOfTwofactorenabled();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getSessionid())
        {
            binder << getValueOfSessionid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getPrivatekey())
        {
            binder << getValueOfPrivatekey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getIsfirsttimelogin())
        {
            binder << getValueOfIsfirsttimelogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getIshrreference())
        {
            binder << getValueOfIshrreference();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getSession())
        {
            binder << getValueOfSession();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getCreateddate())
        {
            binder << getValueOfCreateddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getCreatedby())
        {
            binder << getValueOfCreatedby();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getUpdateddate())
        {
            binder << getValueOfUpdateddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getUpdatedby())
        {
            binder << getValueOfUpdatedby();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Systemaccounts::toJson() const
{
    Json::Value ret;
    if(getAccountid())
    {
        ret["accountid"]=getValueOfAccountid();
    }
    else
    {
        ret["accountid"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getPasswordhash())
    {
        ret["passwordhash"]=getValueOfPasswordhash();
    }
    else
    {
        ret["passwordhash"]=Json::Value();
    }
    if(getSecuritystamp())
    {
        ret["securitystamp"]=getValueOfSecuritystamp();
    }
    else
    {
        ret["securitystamp"]=Json::Value();
    }
    if(getDisplayname())
    {
        ret["displayname"]=getValueOfDisplayname();
    }
    else
    {
        ret["displayname"]=Json::Value();
    }
    if(getAvatar())
    {
        ret["avatar"]=getValueOfAvatar();
    }
    else
    {
        ret["avatar"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getAccessfailedcount())
    {
        ret["accessfailedcount"]=getValueOfAccessfailedcount();
    }
    else
    {
        ret["accessfailedcount"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getIsemailconfirmed())
    {
        ret["isemailconfirmed"]=getValueOfIsemailconfirmed();
    }
    else
    {
        ret["isemailconfirmed"]=Json::Value();
    }
    if(getPhonenumber())
    {
        ret["phonenumber"]=getValueOfPhonenumber();
    }
    else
    {
        ret["phonenumber"]=Json::Value();
    }
    if(getIsphonenumberconfirmed())
    {
        ret["isphonenumberconfirmed"]=getValueOfIsphonenumberconfirmed();
    }
    else
    {
        ret["isphonenumberconfirmed"]=Json::Value();
    }
    if(getTwofactorenabled())
    {
        ret["twofactorenabled"]=getValueOfTwofactorenabled();
    }
    else
    {
        ret["twofactorenabled"]=Json::Value();
    }
    if(getSessionid())
    {
        ret["sessionid"]=getValueOfSessionid();
    }
    else
    {
        ret["sessionid"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getPrivatekey())
    {
        ret["privatekey"]=getValueOfPrivatekey();
    }
    else
    {
        ret["privatekey"]=Json::Value();
    }
    if(getIsfirsttimelogin())
    {
        ret["isfirsttimelogin"]=getValueOfIsfirsttimelogin();
    }
    else
    {
        ret["isfirsttimelogin"]=Json::Value();
    }
    if(getIshrreference())
    {
        ret["ishrreference"]=getValueOfIshrreference();
    }
    else
    {
        ret["ishrreference"]=Json::Value();
    }
    if(getSession())
    {
        ret["session"]=getValueOfSession();
    }
    else
    {
        ret["session"]=Json::Value();
    }
    if(getCreateddate())
    {
        ret["createddate"]=getCreateddate()->toDbStringLocal();
    }
    else
    {
        ret["createddate"]=Json::Value();
    }
    if(getCreatedby())
    {
        ret["createdby"]=getValueOfCreatedby();
    }
    else
    {
        ret["createdby"]=Json::Value();
    }
    if(getUpdateddate())
    {
        ret["updateddate"]=getUpdateddate()->toDbStringLocal();
    }
    else
    {
        ret["updateddate"]=Json::Value();
    }
    if(getUpdatedby())
    {
        ret["updatedby"]=getValueOfUpdatedby();
    }
    else
    {
        ret["updatedby"]=Json::Value();
    }
    return ret;
}

Json::Value Systemaccounts::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 23)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getAccountid())
            {
                ret[pMasqueradingVector[0]]=getValueOfAccountid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUsername())
            {
                ret[pMasqueradingVector[1]]=getValueOfUsername();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getPasswordhash())
            {
                ret[pMasqueradingVector[2]]=getValueOfPasswordhash();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSecuritystamp())
            {
                ret[pMasqueradingVector[3]]=getValueOfSecuritystamp();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDisplayname())
            {
                ret[pMasqueradingVector[4]]=getValueOfDisplayname();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAvatar())
            {
                ret[pMasqueradingVector[5]]=getValueOfAvatar();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[6]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getAccessfailedcount())
            {
                ret[pMasqueradingVector[7]]=getValueOfAccessfailedcount();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[8]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getIsemailconfirmed())
            {
                ret[pMasqueradingVector[9]]=getValueOfIsemailconfirmed();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getPhonenumber())
            {
                ret[pMasqueradingVector[10]]=getValueOfPhonenumber();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getIsphonenumberconfirmed())
            {
                ret[pMasqueradingVector[11]]=getValueOfIsphonenumberconfirmed();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getTwofactorenabled())
            {
                ret[pMasqueradingVector[12]]=getValueOfTwofactorenabled();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getSessionid())
            {
                ret[pMasqueradingVector[13]]=getValueOfSessionid();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[14]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getPrivatekey())
            {
                ret[pMasqueradingVector[15]]=getValueOfPrivatekey();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getIsfirsttimelogin())
            {
                ret[pMasqueradingVector[16]]=getValueOfIsfirsttimelogin();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getIshrreference())
            {
                ret[pMasqueradingVector[17]]=getValueOfIshrreference();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getSession())
            {
                ret[pMasqueradingVector[18]]=getValueOfSession();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getCreateddate())
            {
                ret[pMasqueradingVector[19]]=getCreateddate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getCreatedby())
            {
                ret[pMasqueradingVector[20]]=getValueOfCreatedby();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getUpdateddate())
            {
                ret[pMasqueradingVector[21]]=getUpdateddate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getUpdatedby())
            {
                ret[pMasqueradingVector[22]]=getValueOfUpdatedby();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getAccountid())
    {
        ret["accountid"]=getValueOfAccountid();
    }
    else
    {
        ret["accountid"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getPasswordhash())
    {
        ret["passwordhash"]=getValueOfPasswordhash();
    }
    else
    {
        ret["passwordhash"]=Json::Value();
    }
    if(getSecuritystamp())
    {
        ret["securitystamp"]=getValueOfSecuritystamp();
    }
    else
    {
        ret["securitystamp"]=Json::Value();
    }
    if(getDisplayname())
    {
        ret["displayname"]=getValueOfDisplayname();
    }
    else
    {
        ret["displayname"]=Json::Value();
    }
    if(getAvatar())
    {
        ret["avatar"]=getValueOfAvatar();
    }
    else
    {
        ret["avatar"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getAccessfailedcount())
    {
        ret["accessfailedcount"]=getValueOfAccessfailedcount();
    }
    else
    {
        ret["accessfailedcount"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getIsemailconfirmed())
    {
        ret["isemailconfirmed"]=getValueOfIsemailconfirmed();
    }
    else
    {
        ret["isemailconfirmed"]=Json::Value();
    }
    if(getPhonenumber())
    {
        ret["phonenumber"]=getValueOfPhonenumber();
    }
    else
    {
        ret["phonenumber"]=Json::Value();
    }
    if(getIsphonenumberconfirmed())
    {
        ret["isphonenumberconfirmed"]=getValueOfIsphonenumberconfirmed();
    }
    else
    {
        ret["isphonenumberconfirmed"]=Json::Value();
    }
    if(getTwofactorenabled())
    {
        ret["twofactorenabled"]=getValueOfTwofactorenabled();
    }
    else
    {
        ret["twofactorenabled"]=Json::Value();
    }
    if(getSessionid())
    {
        ret["sessionid"]=getValueOfSessionid();
    }
    else
    {
        ret["sessionid"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getPrivatekey())
    {
        ret["privatekey"]=getValueOfPrivatekey();
    }
    else
    {
        ret["privatekey"]=Json::Value();
    }
    if(getIsfirsttimelogin())
    {
        ret["isfirsttimelogin"]=getValueOfIsfirsttimelogin();
    }
    else
    {
        ret["isfirsttimelogin"]=Json::Value();
    }
    if(getIshrreference())
    {
        ret["ishrreference"]=getValueOfIshrreference();
    }
    else
    {
        ret["ishrreference"]=Json::Value();
    }
    if(getSession())
    {
        ret["session"]=getValueOfSession();
    }
    else
    {
        ret["session"]=Json::Value();
    }
    if(getCreateddate())
    {
        ret["createddate"]=getCreateddate()->toDbStringLocal();
    }
    else
    {
        ret["createddate"]=Json::Value();
    }
    if(getCreatedby())
    {
        ret["createdby"]=getValueOfCreatedby();
    }
    else
    {
        ret["createdby"]=Json::Value();
    }
    if(getUpdateddate())
    {
        ret["updateddate"]=getUpdateddate()->toDbStringLocal();
    }
    else
    {
        ret["updateddate"]=Json::Value();
    }
    if(getUpdatedby())
    {
        ret["updatedby"]=getValueOfUpdatedby();
    }
    else
    {
        ret["updatedby"]=Json::Value();
    }
    return ret;
}

bool Systemaccounts::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("accountid"))
    {
        if(!validJsonOfField(0, "accountid", pJson["accountid"], err, true))
            return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(1, "username", pJson["username"], err, true))
            return false;
    }
    if(pJson.isMember("passwordhash"))
    {
        if(!validJsonOfField(2, "passwordhash", pJson["passwordhash"], err, true))
            return false;
    }
    if(pJson.isMember("securitystamp"))
    {
        if(!validJsonOfField(3, "securitystamp", pJson["securitystamp"], err, true))
            return false;
    }
    if(pJson.isMember("displayname"))
    {
        if(!validJsonOfField(4, "displayname", pJson["displayname"], err, true))
            return false;
    }
    if(pJson.isMember("avatar"))
    {
        if(!validJsonOfField(5, "avatar", pJson["avatar"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(6, "type", pJson["type"], err, true))
            return false;
    }
    else
    {
        err="The type column cannot be null";
        return false;
    }
    if(pJson.isMember("accessfailedcount"))
    {
        if(!validJsonOfField(7, "accessfailedcount", pJson["accessfailedcount"], err, true))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(8, "email", pJson["email"], err, true))
            return false;
    }
    if(pJson.isMember("isemailconfirmed"))
    {
        if(!validJsonOfField(9, "isemailconfirmed", pJson["isemailconfirmed"], err, true))
            return false;
    }
    if(pJson.isMember("phonenumber"))
    {
        if(!validJsonOfField(10, "phonenumber", pJson["phonenumber"], err, true))
            return false;
    }
    if(pJson.isMember("isphonenumberconfirmed"))
    {
        if(!validJsonOfField(11, "isphonenumberconfirmed", pJson["isphonenumberconfirmed"], err, true))
            return false;
    }
    if(pJson.isMember("twofactorenabled"))
    {
        if(!validJsonOfField(12, "twofactorenabled", pJson["twofactorenabled"], err, true))
            return false;
    }
    if(pJson.isMember("sessionid"))
    {
        if(!validJsonOfField(13, "sessionid", pJson["sessionid"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(14, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("privatekey"))
    {
        if(!validJsonOfField(15, "privatekey", pJson["privatekey"], err, true))
            return false;
    }
    if(pJson.isMember("isfirsttimelogin"))
    {
        if(!validJsonOfField(16, "isfirsttimelogin", pJson["isfirsttimelogin"], err, true))
            return false;
    }
    if(pJson.isMember("ishrreference"))
    {
        if(!validJsonOfField(17, "ishrreference", pJson["ishrreference"], err, true))
            return false;
    }
    if(pJson.isMember("session"))
    {
        if(!validJsonOfField(18, "session", pJson["session"], err, true))
            return false;
    }
    if(pJson.isMember("createddate"))
    {
        if(!validJsonOfField(19, "createddate", pJson["createddate"], err, true))
            return false;
    }
    else
    {
        err="The createddate column cannot be null";
        return false;
    }
    if(pJson.isMember("createdby"))
    {
        if(!validJsonOfField(20, "createdby", pJson["createdby"], err, true))
            return false;
    }
    if(pJson.isMember("updateddate"))
    {
        if(!validJsonOfField(21, "updateddate", pJson["updateddate"], err, true))
            return false;
    }
    if(pJson.isMember("updatedby"))
    {
        if(!validJsonOfField(22, "updatedby", pJson["updatedby"], err, true))
            return false;
    }
    return true;
}
bool Systemaccounts::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 23)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[17].empty())
      {
          if(pJson.isMember(pMasqueradingVector[17]))
          {
              if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[18].empty())
      {
          if(pJson.isMember(pMasqueradingVector[18]))
          {
              if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[19].empty())
      {
          if(pJson.isMember(pMasqueradingVector[19]))
          {
              if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[19] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[20].empty())
      {
          if(pJson.isMember(pMasqueradingVector[20]))
          {
              if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[21].empty())
      {
          if(pJson.isMember(pMasqueradingVector[21]))
          {
              if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[22].empty())
      {
          if(pJson.isMember(pMasqueradingVector[22]))
          {
              if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Systemaccounts::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("accountid"))
    {
        if(!validJsonOfField(0, "accountid", pJson["accountid"], err, false))
            return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(1, "username", pJson["username"], err, false))
            return false;
    }
    if(pJson.isMember("passwordhash"))
    {
        if(!validJsonOfField(2, "passwordhash", pJson["passwordhash"], err, false))
            return false;
    }
    if(pJson.isMember("securitystamp"))
    {
        if(!validJsonOfField(3, "securitystamp", pJson["securitystamp"], err, false))
            return false;
    }
    if(pJson.isMember("displayname"))
    {
        if(!validJsonOfField(4, "displayname", pJson["displayname"], err, false))
            return false;
    }
    if(pJson.isMember("avatar"))
    {
        if(!validJsonOfField(5, "avatar", pJson["avatar"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(6, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("accessfailedcount"))
    {
        if(!validJsonOfField(7, "accessfailedcount", pJson["accessfailedcount"], err, false))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(8, "email", pJson["email"], err, false))
            return false;
    }
    if(pJson.isMember("isemailconfirmed"))
    {
        if(!validJsonOfField(9, "isemailconfirmed", pJson["isemailconfirmed"], err, false))
            return false;
    }
    if(pJson.isMember("phonenumber"))
    {
        if(!validJsonOfField(10, "phonenumber", pJson["phonenumber"], err, false))
            return false;
    }
    if(pJson.isMember("isphonenumberconfirmed"))
    {
        if(!validJsonOfField(11, "isphonenumberconfirmed", pJson["isphonenumberconfirmed"], err, false))
            return false;
    }
    if(pJson.isMember("twofactorenabled"))
    {
        if(!validJsonOfField(12, "twofactorenabled", pJson["twofactorenabled"], err, false))
            return false;
    }
    if(pJson.isMember("sessionid"))
    {
        if(!validJsonOfField(13, "sessionid", pJson["sessionid"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(14, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("privatekey"))
    {
        if(!validJsonOfField(15, "privatekey", pJson["privatekey"], err, false))
            return false;
    }
    if(pJson.isMember("isfirsttimelogin"))
    {
        if(!validJsonOfField(16, "isfirsttimelogin", pJson["isfirsttimelogin"], err, false))
            return false;
    }
    if(pJson.isMember("ishrreference"))
    {
        if(!validJsonOfField(17, "ishrreference", pJson["ishrreference"], err, false))
            return false;
    }
    if(pJson.isMember("session"))
    {
        if(!validJsonOfField(18, "session", pJson["session"], err, false))
            return false;
    }
    if(pJson.isMember("createddate"))
    {
        if(!validJsonOfField(19, "createddate", pJson["createddate"], err, false))
            return false;
    }
    if(pJson.isMember("createdby"))
    {
        if(!validJsonOfField(20, "createdby", pJson["createdby"], err, false))
            return false;
    }
    if(pJson.isMember("updateddate"))
    {
        if(!validJsonOfField(21, "updateddate", pJson["updateddate"], err, false))
            return false;
    }
    if(pJson.isMember("updatedby"))
    {
        if(!validJsonOfField(22, "updatedby", pJson["updatedby"], err, false))
            return false;
    }
    return true;
}
bool Systemaccounts::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 23)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
      if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
      {
          if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
              return false;
      }
      if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
      {
          if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
              return false;
      }
      if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
      {
          if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
              return false;
      }
      if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
      {
          if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
              return false;
      }
      if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
      {
          if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
              return false;
      }
      if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
      {
          if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Systemaccounts::validJsonOfField(size_t index,
                                      const std::string &fieldName,
                                      const Json::Value &pJson,
                                      std::string &err,
                                      bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 21:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
