/**
 *
 *  Systemaccounts.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Systemaccounts.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::drogon_test;

const std::string Systemaccounts::Cols::_AccountId = "AccountId";
const std::string Systemaccounts::Cols::_Username = "Username";
const std::string Systemaccounts::Cols::_PasswordHash = "PasswordHash";
const std::string Systemaccounts::Cols::_SecurityStamp = "SecurityStamp";
const std::string Systemaccounts::Cols::_DisplayName = "DisplayName";
const std::string Systemaccounts::Cols::_Avatar = "Avatar";
const std::string Systemaccounts::Cols::_Type = "Type";
const std::string Systemaccounts::Cols::_AccessFailedCount = "AccessFailedCount";
const std::string Systemaccounts::Cols::_Email = "Email";
const std::string Systemaccounts::Cols::_IsEmailConfirmed = "IsEmailConfirmed";
const std::string Systemaccounts::Cols::_PhoneNumber = "PhoneNumber";
const std::string Systemaccounts::Cols::_IsPhoneNumberConfirmed = "IsPhoneNumberConfirmed";
const std::string Systemaccounts::Cols::_TwoFactorEnabled = "TwoFactorEnabled";
const std::string Systemaccounts::Cols::_SessionId = "SessionId";
const std::string Systemaccounts::Cols::_Status = "Status";
const std::string Systemaccounts::Cols::_PrivateKey = "PrivateKey";
const std::string Systemaccounts::Cols::_IsFirstTimeLogin = "IsFirstTimeLogin";
const std::string Systemaccounts::Cols::_IsHRReference = "IsHRReference";
const std::string Systemaccounts::Cols::_Session = "Session";
const std::string Systemaccounts::Cols::_CreatedDate = "CreatedDate";
const std::string Systemaccounts::Cols::_CreatedBy = "CreatedBy";
const std::string Systemaccounts::Cols::_UpdatedDate = "UpdatedDate";
const std::string Systemaccounts::Cols::_UpdatedBy = "UpdatedBy";
const std::string Systemaccounts::Cols::_SectionId = "SectionId";
const std::string Systemaccounts::primaryKeyName = "";
const bool Systemaccounts::hasPrimaryKey = false;
const std::string Systemaccounts::tableName = "systemaccounts";

const std::vector<typename Systemaccounts::MetaData> Systemaccounts::metaData_={
{"AccountId","std::string","uuid",0,0,0,0},
{"Username","std::string","varchar(30)",30,0,0,0},
{"PasswordHash","std::string","longtext",0,0,0,0},
{"SecurityStamp","std::string","longtext",0,0,0,0},
{"DisplayName","std::string","varchar(200)",200,0,0,0},
{"Avatar","std::string","longtext",0,0,0,0},
{"Type","int8_t","tinyint(4)",1,0,0,1},
{"AccessFailedCount","int16_t","smallint(6)",2,0,0,0},
{"Email","std::string","varchar(100)",100,0,0,0},
{"IsEmailConfirmed","std::string","bit(1)",0,0,0,0},
{"PhoneNumber","std::string","varchar(50)",50,0,0,0},
{"IsPhoneNumberConfirmed","std::string","bit(1)",0,0,0,0},
{"TwoFactorEnabled","std::string","bit(1)",0,0,0,0},
{"SessionId","std::string","uuid",0,0,0,0},
{"Status","int8_t","tinyint(4)",1,0,0,0},
{"PrivateKey","std::string","longtext",0,0,0,0},
{"IsFirstTimeLogin","std::string","bit(1)",0,0,0,0},
{"IsHRReference","std::string","bit(1)",0,0,0,0},
{"Session","std::string","longtext",0,0,0,0},
{"CreatedDate","::trantor::Date","timestamp",0,0,0,1},
{"CreatedBy","std::string","varchar(30)",30,0,0,0},
{"UpdatedDate","::trantor::Date","timestamp",0,0,0,0},
{"UpdatedBy","std::string","varchar(30)",30,0,0,0},
{"SectionId","std::string","uuid",0,0,0,0}
};
const std::string &Systemaccounts::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Systemaccounts::Systemaccounts(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["AccountId"].isNull())
        {
            accountid_=std::make_shared<std::string>(r["AccountId"].as<std::string>());
        }
        if(!r["Username"].isNull())
        {
            username_=std::make_shared<std::string>(r["Username"].as<std::string>());
        }
        if(!r["PasswordHash"].isNull())
        {
            passwordhash_=std::make_shared<std::string>(r["PasswordHash"].as<std::string>());
        }
        if(!r["SecurityStamp"].isNull())
        {
            securitystamp_=std::make_shared<std::string>(r["SecurityStamp"].as<std::string>());
        }
        if(!r["DisplayName"].isNull())
        {
            displayname_=std::make_shared<std::string>(r["DisplayName"].as<std::string>());
        }
        if(!r["Avatar"].isNull())
        {
            avatar_=std::make_shared<std::string>(r["Avatar"].as<std::string>());
        }
        if(!r["Type"].isNull())
        {
            type_=std::make_shared<int8_t>(r["Type"].as<int8_t>());
        }
        if(!r["AccessFailedCount"].isNull())
        {
            accessfailedcount_=std::make_shared<int16_t>(r["AccessFailedCount"].as<int16_t>());
        }
        if(!r["Email"].isNull())
        {
            email_=std::make_shared<std::string>(r["Email"].as<std::string>());
        }
        if(!r["IsEmailConfirmed"].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(r["IsEmailConfirmed"].as<std::string>());
        }
        if(!r["PhoneNumber"].isNull())
        {
            phonenumber_=std::make_shared<std::string>(r["PhoneNumber"].as<std::string>());
        }
        if(!r["IsPhoneNumberConfirmed"].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(r["IsPhoneNumberConfirmed"].as<std::string>());
        }
        if(!r["TwoFactorEnabled"].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(r["TwoFactorEnabled"].as<std::string>());
        }
        if(!r["SessionId"].isNull())
        {
            sessionid_=std::make_shared<std::string>(r["SessionId"].as<std::string>());
        }
        if(!r["Status"].isNull())
        {
            status_=std::make_shared<int8_t>(r["Status"].as<int8_t>());
        }
        if(!r["PrivateKey"].isNull())
        {
            privatekey_=std::make_shared<std::string>(r["PrivateKey"].as<std::string>());
        }
        if(!r["IsFirstTimeLogin"].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(r["IsFirstTimeLogin"].as<std::string>());
        }
        if(!r["IsHRReference"].isNull())
        {
            ishrreference_=std::make_shared<std::string>(r["IsHRReference"].as<std::string>());
        }
        if(!r["Session"].isNull())
        {
            session_=std::make_shared<std::string>(r["Session"].as<std::string>());
        }
        if(!r["CreatedDate"].isNull())
        {
            auto timeStr = r["CreatedDate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["CreatedBy"].isNull())
        {
            createdby_=std::make_shared<std::string>(r["CreatedBy"].as<std::string>());
        }
        if(!r["UpdatedDate"].isNull())
        {
            auto timeStr = r["UpdatedDate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["UpdatedBy"].isNull())
        {
            updatedby_=std::make_shared<std::string>(r["UpdatedBy"].as<std::string>());
        }
        if(!r["SectionId"].isNull())
        {
            sectionid_=std::make_shared<std::string>(r["SectionId"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 24 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            accountid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            username_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            passwordhash_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            securitystamp_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            displayname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            avatar_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            type_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            accessfailedcount_=std::make_shared<int16_t>(r[index].as<int16_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            phonenumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            sessionid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            status_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            privatekey_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            ishrreference_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            session_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            createdby_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            updatedby_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            sectionid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Systemaccounts::Systemaccounts(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 24)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            passwordhash_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            securitystamp_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            avatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            type_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            accessfailedcount_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            sessionid_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            privatekey_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            ishrreference_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            session_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[19]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            createdby_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[21]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            updatedby_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            sectionid_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
}

Systemaccounts::Systemaccounts(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("AccountId"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["AccountId"].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson["AccountId"].asString());
        }
    }
    if(pJson.isMember("Username"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["Username"].asString());
        }
    }
    if(pJson.isMember("PasswordHash"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["PasswordHash"].isNull())
        {
            passwordhash_=std::make_shared<std::string>(pJson["PasswordHash"].asString());
        }
    }
    if(pJson.isMember("SecurityStamp"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["SecurityStamp"].isNull())
        {
            securitystamp_=std::make_shared<std::string>(pJson["SecurityStamp"].asString());
        }
    }
    if(pJson.isMember("DisplayName"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["DisplayName"].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson["DisplayName"].asString());
        }
    }
    if(pJson.isMember("Avatar"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["Avatar"].isNull())
        {
            avatar_=std::make_shared<std::string>(pJson["Avatar"].asString());
        }
    }
    if(pJson.isMember("Type"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["Type"].isNull())
        {
            type_=std::make_shared<int8_t>((int8_t)pJson["Type"].asInt64());
        }
    }
    if(pJson.isMember("AccessFailedCount"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["AccessFailedCount"].isNull())
        {
            accessfailedcount_=std::make_shared<int16_t>((int16_t)pJson["AccessFailedCount"].asInt64());
        }
    }
    if(pJson.isMember("Email"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["Email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["Email"].asString());
        }
    }
    if(pJson.isMember("IsEmailConfirmed"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["IsEmailConfirmed"].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(pJson["IsEmailConfirmed"].asString());
        }
    }
    if(pJson.isMember("PhoneNumber"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["PhoneNumber"].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson["PhoneNumber"].asString());
        }
    }
    if(pJson.isMember("IsPhoneNumberConfirmed"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["IsPhoneNumberConfirmed"].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(pJson["IsPhoneNumberConfirmed"].asString());
        }
    }
    if(pJson.isMember("TwoFactorEnabled"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["TwoFactorEnabled"].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(pJson["TwoFactorEnabled"].asString());
        }
    }
    if(pJson.isMember("SessionId"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["SessionId"].isNull())
        {
            sessionid_=std::make_shared<std::string>(pJson["SessionId"].asString());
        }
    }
    if(pJson.isMember("Status"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["Status"].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson["Status"].asInt64());
        }
    }
    if(pJson.isMember("PrivateKey"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["PrivateKey"].isNull())
        {
            privatekey_=std::make_shared<std::string>(pJson["PrivateKey"].asString());
        }
    }
    if(pJson.isMember("IsFirstTimeLogin"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["IsFirstTimeLogin"].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(pJson["IsFirstTimeLogin"].asString());
        }
    }
    if(pJson.isMember("IsHRReference"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["IsHRReference"].isNull())
        {
            ishrreference_=std::make_shared<std::string>(pJson["IsHRReference"].asString());
        }
    }
    if(pJson.isMember("Session"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["Session"].isNull())
        {
            session_=std::make_shared<std::string>(pJson["Session"].asString());
        }
    }
    if(pJson.isMember("CreatedDate"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["CreatedDate"].isNull())
        {
            auto timeStr = pJson["CreatedDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("CreatedBy"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["CreatedBy"].isNull())
        {
            createdby_=std::make_shared<std::string>(pJson["CreatedBy"].asString());
        }
    }
    if(pJson.isMember("UpdatedDate"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["UpdatedDate"].isNull())
        {
            auto timeStr = pJson["UpdatedDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("UpdatedBy"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["UpdatedBy"].isNull())
        {
            updatedby_=std::make_shared<std::string>(pJson["UpdatedBy"].asString());
        }
    }
    if(pJson.isMember("SectionId"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["SectionId"].isNull())
        {
            sectionid_=std::make_shared<std::string>(pJson["SectionId"].asString());
        }
    }
}

void Systemaccounts::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 24)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            passwordhash_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            securitystamp_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            avatar_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            type_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            accessfailedcount_=std::make_shared<int16_t>((int16_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            sessionid_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            privatekey_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            ishrreference_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            session_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[19]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            createdby_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[21]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            updatedby_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            sectionid_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
}

void Systemaccounts::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("AccountId"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["AccountId"].isNull())
        {
            accountid_=std::make_shared<std::string>(pJson["AccountId"].asString());
        }
    }
    if(pJson.isMember("Username"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["Username"].asString());
        }
    }
    if(pJson.isMember("PasswordHash"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["PasswordHash"].isNull())
        {
            passwordhash_=std::make_shared<std::string>(pJson["PasswordHash"].asString());
        }
    }
    if(pJson.isMember("SecurityStamp"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["SecurityStamp"].isNull())
        {
            securitystamp_=std::make_shared<std::string>(pJson["SecurityStamp"].asString());
        }
    }
    if(pJson.isMember("DisplayName"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["DisplayName"].isNull())
        {
            displayname_=std::make_shared<std::string>(pJson["DisplayName"].asString());
        }
    }
    if(pJson.isMember("Avatar"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["Avatar"].isNull())
        {
            avatar_=std::make_shared<std::string>(pJson["Avatar"].asString());
        }
    }
    if(pJson.isMember("Type"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["Type"].isNull())
        {
            type_=std::make_shared<int8_t>((int8_t)pJson["Type"].asInt64());
        }
    }
    if(pJson.isMember("AccessFailedCount"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["AccessFailedCount"].isNull())
        {
            accessfailedcount_=std::make_shared<int16_t>((int16_t)pJson["AccessFailedCount"].asInt64());
        }
    }
    if(pJson.isMember("Email"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["Email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["Email"].asString());
        }
    }
    if(pJson.isMember("IsEmailConfirmed"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["IsEmailConfirmed"].isNull())
        {
            isemailconfirmed_=std::make_shared<std::string>(pJson["IsEmailConfirmed"].asString());
        }
    }
    if(pJson.isMember("PhoneNumber"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["PhoneNumber"].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson["PhoneNumber"].asString());
        }
    }
    if(pJson.isMember("IsPhoneNumberConfirmed"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["IsPhoneNumberConfirmed"].isNull())
        {
            isphonenumberconfirmed_=std::make_shared<std::string>(pJson["IsPhoneNumberConfirmed"].asString());
        }
    }
    if(pJson.isMember("TwoFactorEnabled"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["TwoFactorEnabled"].isNull())
        {
            twofactorenabled_=std::make_shared<std::string>(pJson["TwoFactorEnabled"].asString());
        }
    }
    if(pJson.isMember("SessionId"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["SessionId"].isNull())
        {
            sessionid_=std::make_shared<std::string>(pJson["SessionId"].asString());
        }
    }
    if(pJson.isMember("Status"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["Status"].isNull())
        {
            status_=std::make_shared<int8_t>((int8_t)pJson["Status"].asInt64());
        }
    }
    if(pJson.isMember("PrivateKey"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["PrivateKey"].isNull())
        {
            privatekey_=std::make_shared<std::string>(pJson["PrivateKey"].asString());
        }
    }
    if(pJson.isMember("IsFirstTimeLogin"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["IsFirstTimeLogin"].isNull())
        {
            isfirsttimelogin_=std::make_shared<std::string>(pJson["IsFirstTimeLogin"].asString());
        }
    }
    if(pJson.isMember("IsHRReference"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["IsHRReference"].isNull())
        {
            ishrreference_=std::make_shared<std::string>(pJson["IsHRReference"].asString());
        }
    }
    if(pJson.isMember("Session"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["Session"].isNull())
        {
            session_=std::make_shared<std::string>(pJson["Session"].asString());
        }
    }
    if(pJson.isMember("CreatedDate"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["CreatedDate"].isNull())
        {
            auto timeStr = pJson["CreatedDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("CreatedBy"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["CreatedBy"].isNull())
        {
            createdby_=std::make_shared<std::string>(pJson["CreatedBy"].asString());
        }
    }
    if(pJson.isMember("UpdatedDate"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["UpdatedDate"].isNull())
        {
            auto timeStr = pJson["UpdatedDate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateddate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("UpdatedBy"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["UpdatedBy"].isNull())
        {
            updatedby_=std::make_shared<std::string>(pJson["UpdatedBy"].asString());
        }
    }
    if(pJson.isMember("SectionId"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["SectionId"].isNull())
        {
            sectionid_=std::make_shared<std::string>(pJson["SectionId"].asString());
        }
    }
}

const std::string &Systemaccounts::getValueOfAccountid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(accountid_)
        return *accountid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getAccountid() const noexcept
{
    return accountid_;
}
void Systemaccounts::setAccountid(const std::string &pAccountid) noexcept
{
    accountid_ = std::make_shared<std::string>(pAccountid);
    dirtyFlag_[0] = true;
}
void Systemaccounts::setAccountid(std::string &&pAccountid) noexcept
{
    accountid_ = std::make_shared<std::string>(std::move(pAccountid));
    dirtyFlag_[0] = true;
}
void Systemaccounts::setAccountidToNull() noexcept
{
    accountid_.reset();
    dirtyFlag_[0] = true;
}

const std::string &Systemaccounts::getValueOfUsername() const noexcept
{
    const static std::string defaultValue = std::string();
    if(username_)
        return *username_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getUsername() const noexcept
{
    return username_;
}
void Systemaccounts::setUsername(const std::string &pUsername) noexcept
{
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[1] = true;
}
void Systemaccounts::setUsername(std::string &&pUsername) noexcept
{
    username_ = std::make_shared<std::string>(std::move(pUsername));
    dirtyFlag_[1] = true;
}
void Systemaccounts::setUsernameToNull() noexcept
{
    username_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Systemaccounts::getValueOfPasswordhash() const noexcept
{
    const static std::string defaultValue = std::string();
    if(passwordhash_)
        return *passwordhash_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getPasswordhash() const noexcept
{
    return passwordhash_;
}
void Systemaccounts::setPasswordhash(const std::string &pPasswordhash) noexcept
{
    passwordhash_ = std::make_shared<std::string>(pPasswordhash);
    dirtyFlag_[2] = true;
}
void Systemaccounts::setPasswordhash(std::string &&pPasswordhash) noexcept
{
    passwordhash_ = std::make_shared<std::string>(std::move(pPasswordhash));
    dirtyFlag_[2] = true;
}
void Systemaccounts::setPasswordhashToNull() noexcept
{
    passwordhash_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Systemaccounts::getValueOfSecuritystamp() const noexcept
{
    const static std::string defaultValue = std::string();
    if(securitystamp_)
        return *securitystamp_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getSecuritystamp() const noexcept
{
    return securitystamp_;
}
void Systemaccounts::setSecuritystamp(const std::string &pSecuritystamp) noexcept
{
    securitystamp_ = std::make_shared<std::string>(pSecuritystamp);
    dirtyFlag_[3] = true;
}
void Systemaccounts::setSecuritystamp(std::string &&pSecuritystamp) noexcept
{
    securitystamp_ = std::make_shared<std::string>(std::move(pSecuritystamp));
    dirtyFlag_[3] = true;
}
void Systemaccounts::setSecuritystampToNull() noexcept
{
    securitystamp_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Systemaccounts::getValueOfDisplayname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(displayname_)
        return *displayname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getDisplayname() const noexcept
{
    return displayname_;
}
void Systemaccounts::setDisplayname(const std::string &pDisplayname) noexcept
{
    displayname_ = std::make_shared<std::string>(pDisplayname);
    dirtyFlag_[4] = true;
}
void Systemaccounts::setDisplayname(std::string &&pDisplayname) noexcept
{
    displayname_ = std::make_shared<std::string>(std::move(pDisplayname));
    dirtyFlag_[4] = true;
}
void Systemaccounts::setDisplaynameToNull() noexcept
{
    displayname_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Systemaccounts::getValueOfAvatar() const noexcept
{
    const static std::string defaultValue = std::string();
    if(avatar_)
        return *avatar_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getAvatar() const noexcept
{
    return avatar_;
}
void Systemaccounts::setAvatar(const std::string &pAvatar) noexcept
{
    avatar_ = std::make_shared<std::string>(pAvatar);
    dirtyFlag_[5] = true;
}
void Systemaccounts::setAvatar(std::string &&pAvatar) noexcept
{
    avatar_ = std::make_shared<std::string>(std::move(pAvatar));
    dirtyFlag_[5] = true;
}
void Systemaccounts::setAvatarToNull() noexcept
{
    avatar_.reset();
    dirtyFlag_[5] = true;
}

const int8_t &Systemaccounts::getValueOfType() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Systemaccounts::getType() const noexcept
{
    return type_;
}
void Systemaccounts::setType(const int8_t &pType) noexcept
{
    type_ = std::make_shared<int8_t>(pType);
    dirtyFlag_[6] = true;
}

const int16_t &Systemaccounts::getValueOfAccessfailedcount() const noexcept
{
    const static int16_t defaultValue = int16_t();
    if(accessfailedcount_)
        return *accessfailedcount_;
    return defaultValue;
}
const std::shared_ptr<int16_t> &Systemaccounts::getAccessfailedcount() const noexcept
{
    return accessfailedcount_;
}
void Systemaccounts::setAccessfailedcount(const int16_t &pAccessfailedcount) noexcept
{
    accessfailedcount_ = std::make_shared<int16_t>(pAccessfailedcount);
    dirtyFlag_[7] = true;
}
void Systemaccounts::setAccessfailedcountToNull() noexcept
{
    accessfailedcount_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Systemaccounts::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getEmail() const noexcept
{
    return email_;
}
void Systemaccounts::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[8] = true;
}
void Systemaccounts::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[8] = true;
}
void Systemaccounts::setEmailToNull() noexcept
{
    email_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Systemaccounts::getValueOfIsemailconfirmed() const noexcept
{
    const static std::string defaultValue = std::string();
    if(isemailconfirmed_)
        return *isemailconfirmed_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getIsemailconfirmed() const noexcept
{
    return isemailconfirmed_;
}
void Systemaccounts::setIsemailconfirmed(const std::string &pIsemailconfirmed) noexcept
{
    isemailconfirmed_ = std::make_shared<std::string>(pIsemailconfirmed);
    dirtyFlag_[9] = true;
}
void Systemaccounts::setIsemailconfirmed(std::string &&pIsemailconfirmed) noexcept
{
    isemailconfirmed_ = std::make_shared<std::string>(std::move(pIsemailconfirmed));
    dirtyFlag_[9] = true;
}
void Systemaccounts::setIsemailconfirmedToNull() noexcept
{
    isemailconfirmed_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Systemaccounts::getValueOfPhonenumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(phonenumber_)
        return *phonenumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getPhonenumber() const noexcept
{
    return phonenumber_;
}
void Systemaccounts::setPhonenumber(const std::string &pPhonenumber) noexcept
{
    phonenumber_ = std::make_shared<std::string>(pPhonenumber);
    dirtyFlag_[10] = true;
}
void Systemaccounts::setPhonenumber(std::string &&pPhonenumber) noexcept
{
    phonenumber_ = std::make_shared<std::string>(std::move(pPhonenumber));
    dirtyFlag_[10] = true;
}
void Systemaccounts::setPhonenumberToNull() noexcept
{
    phonenumber_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Systemaccounts::getValueOfIsphonenumberconfirmed() const noexcept
{
    const static std::string defaultValue = std::string();
    if(isphonenumberconfirmed_)
        return *isphonenumberconfirmed_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getIsphonenumberconfirmed() const noexcept
{
    return isphonenumberconfirmed_;
}
void Systemaccounts::setIsphonenumberconfirmed(const std::string &pIsphonenumberconfirmed) noexcept
{
    isphonenumberconfirmed_ = std::make_shared<std::string>(pIsphonenumberconfirmed);
    dirtyFlag_[11] = true;
}
void Systemaccounts::setIsphonenumberconfirmed(std::string &&pIsphonenumberconfirmed) noexcept
{
    isphonenumberconfirmed_ = std::make_shared<std::string>(std::move(pIsphonenumberconfirmed));
    dirtyFlag_[11] = true;
}
void Systemaccounts::setIsphonenumberconfirmedToNull() noexcept
{
    isphonenumberconfirmed_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Systemaccounts::getValueOfTwofactorenabled() const noexcept
{
    const static std::string defaultValue = std::string();
    if(twofactorenabled_)
        return *twofactorenabled_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getTwofactorenabled() const noexcept
{
    return twofactorenabled_;
}
void Systemaccounts::setTwofactorenabled(const std::string &pTwofactorenabled) noexcept
{
    twofactorenabled_ = std::make_shared<std::string>(pTwofactorenabled);
    dirtyFlag_[12] = true;
}
void Systemaccounts::setTwofactorenabled(std::string &&pTwofactorenabled) noexcept
{
    twofactorenabled_ = std::make_shared<std::string>(std::move(pTwofactorenabled));
    dirtyFlag_[12] = true;
}
void Systemaccounts::setTwofactorenabledToNull() noexcept
{
    twofactorenabled_.reset();
    dirtyFlag_[12] = true;
}

const std::string &Systemaccounts::getValueOfSessionid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(sessionid_)
        return *sessionid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getSessionid() const noexcept
{
    return sessionid_;
}
void Systemaccounts::setSessionid(const std::string &pSessionid) noexcept
{
    sessionid_ = std::make_shared<std::string>(pSessionid);
    dirtyFlag_[13] = true;
}
void Systemaccounts::setSessionid(std::string &&pSessionid) noexcept
{
    sessionid_ = std::make_shared<std::string>(std::move(pSessionid));
    dirtyFlag_[13] = true;
}
void Systemaccounts::setSessionidToNull() noexcept
{
    sessionid_.reset();
    dirtyFlag_[13] = true;
}

const int8_t &Systemaccounts::getValueOfStatus() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Systemaccounts::getStatus() const noexcept
{
    return status_;
}
void Systemaccounts::setStatus(const int8_t &pStatus) noexcept
{
    status_ = std::make_shared<int8_t>(pStatus);
    dirtyFlag_[14] = true;
}
void Systemaccounts::setStatusToNull() noexcept
{
    status_.reset();
    dirtyFlag_[14] = true;
}

const std::string &Systemaccounts::getValueOfPrivatekey() const noexcept
{
    const static std::string defaultValue = std::string();
    if(privatekey_)
        return *privatekey_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getPrivatekey() const noexcept
{
    return privatekey_;
}
void Systemaccounts::setPrivatekey(const std::string &pPrivatekey) noexcept
{
    privatekey_ = std::make_shared<std::string>(pPrivatekey);
    dirtyFlag_[15] = true;
}
void Systemaccounts::setPrivatekey(std::string &&pPrivatekey) noexcept
{
    privatekey_ = std::make_shared<std::string>(std::move(pPrivatekey));
    dirtyFlag_[15] = true;
}
void Systemaccounts::setPrivatekeyToNull() noexcept
{
    privatekey_.reset();
    dirtyFlag_[15] = true;
}

const std::string &Systemaccounts::getValueOfIsfirsttimelogin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(isfirsttimelogin_)
        return *isfirsttimelogin_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getIsfirsttimelogin() const noexcept
{
    return isfirsttimelogin_;
}
void Systemaccounts::setIsfirsttimelogin(const std::string &pIsfirsttimelogin) noexcept
{
    isfirsttimelogin_ = std::make_shared<std::string>(pIsfirsttimelogin);
    dirtyFlag_[16] = true;
}
void Systemaccounts::setIsfirsttimelogin(std::string &&pIsfirsttimelogin) noexcept
{
    isfirsttimelogin_ = std::make_shared<std::string>(std::move(pIsfirsttimelogin));
    dirtyFlag_[16] = true;
}
void Systemaccounts::setIsfirsttimeloginToNull() noexcept
{
    isfirsttimelogin_.reset();
    dirtyFlag_[16] = true;
}

const std::string &Systemaccounts::getValueOfIshrreference() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ishrreference_)
        return *ishrreference_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getIshrreference() const noexcept
{
    return ishrreference_;
}
void Systemaccounts::setIshrreference(const std::string &pIshrreference) noexcept
{
    ishrreference_ = std::make_shared<std::string>(pIshrreference);
    dirtyFlag_[17] = true;
}
void Systemaccounts::setIshrreference(std::string &&pIshrreference) noexcept
{
    ishrreference_ = std::make_shared<std::string>(std::move(pIshrreference));
    dirtyFlag_[17] = true;
}
void Systemaccounts::setIshrreferenceToNull() noexcept
{
    ishrreference_.reset();
    dirtyFlag_[17] = true;
}

const std::string &Systemaccounts::getValueOfSession() const noexcept
{
    const static std::string defaultValue = std::string();
    if(session_)
        return *session_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getSession() const noexcept
{
    return session_;
}
void Systemaccounts::setSession(const std::string &pSession) noexcept
{
    session_ = std::make_shared<std::string>(pSession);
    dirtyFlag_[18] = true;
}
void Systemaccounts::setSession(std::string &&pSession) noexcept
{
    session_ = std::make_shared<std::string>(std::move(pSession));
    dirtyFlag_[18] = true;
}
void Systemaccounts::setSessionToNull() noexcept
{
    session_.reset();
    dirtyFlag_[18] = true;
}

const ::trantor::Date &Systemaccounts::getValueOfCreateddate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createddate_)
        return *createddate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Systemaccounts::getCreateddate() const noexcept
{
    return createddate_;
}
void Systemaccounts::setCreateddate(const ::trantor::Date &pCreateddate) noexcept
{
    createddate_ = std::make_shared<::trantor::Date>(pCreateddate);
    dirtyFlag_[19] = true;
}

const std::string &Systemaccounts::getValueOfCreatedby() const noexcept
{
    const static std::string defaultValue = std::string();
    if(createdby_)
        return *createdby_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getCreatedby() const noexcept
{
    return createdby_;
}
void Systemaccounts::setCreatedby(const std::string &pCreatedby) noexcept
{
    createdby_ = std::make_shared<std::string>(pCreatedby);
    dirtyFlag_[20] = true;
}
void Systemaccounts::setCreatedby(std::string &&pCreatedby) noexcept
{
    createdby_ = std::make_shared<std::string>(std::move(pCreatedby));
    dirtyFlag_[20] = true;
}
void Systemaccounts::setCreatedbyToNull() noexcept
{
    createdby_.reset();
    dirtyFlag_[20] = true;
}

const ::trantor::Date &Systemaccounts::getValueOfUpdateddate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateddate_)
        return *updateddate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Systemaccounts::getUpdateddate() const noexcept
{
    return updateddate_;
}
void Systemaccounts::setUpdateddate(const ::trantor::Date &pUpdateddate) noexcept
{
    updateddate_ = std::make_shared<::trantor::Date>(pUpdateddate);
    dirtyFlag_[21] = true;
}
void Systemaccounts::setUpdateddateToNull() noexcept
{
    updateddate_.reset();
    dirtyFlag_[21] = true;
}

const std::string &Systemaccounts::getValueOfUpdatedby() const noexcept
{
    const static std::string defaultValue = std::string();
    if(updatedby_)
        return *updatedby_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getUpdatedby() const noexcept
{
    return updatedby_;
}
void Systemaccounts::setUpdatedby(const std::string &pUpdatedby) noexcept
{
    updatedby_ = std::make_shared<std::string>(pUpdatedby);
    dirtyFlag_[22] = true;
}
void Systemaccounts::setUpdatedby(std::string &&pUpdatedby) noexcept
{
    updatedby_ = std::make_shared<std::string>(std::move(pUpdatedby));
    dirtyFlag_[22] = true;
}
void Systemaccounts::setUpdatedbyToNull() noexcept
{
    updatedby_.reset();
    dirtyFlag_[22] = true;
}

const std::string &Systemaccounts::getValueOfSectionid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(sectionid_)
        return *sectionid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Systemaccounts::getSectionid() const noexcept
{
    return sectionid_;
}
void Systemaccounts::setSectionid(const std::string &pSectionid) noexcept
{
    sectionid_ = std::make_shared<std::string>(pSectionid);
    dirtyFlag_[23] = true;
}
void Systemaccounts::setSectionid(std::string &&pSectionid) noexcept
{
    sectionid_ = std::make_shared<std::string>(std::move(pSectionid));
    dirtyFlag_[23] = true;
}
void Systemaccounts::setSectionidToNull() noexcept
{
    sectionid_.reset();
    dirtyFlag_[23] = true;
}

void Systemaccounts::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Systemaccounts::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "AccountId",
        "Username",
        "PasswordHash",
        "SecurityStamp",
        "DisplayName",
        "Avatar",
        "Type",
        "AccessFailedCount",
        "Email",
        "IsEmailConfirmed",
        "PhoneNumber",
        "IsPhoneNumberConfirmed",
        "TwoFactorEnabled",
        "SessionId",
        "Status",
        "PrivateKey",
        "IsFirstTimeLogin",
        "IsHRReference",
        "Session",
        "CreatedDate",
        "CreatedBy",
        "UpdatedDate",
        "UpdatedBy",
        "SectionId"
    };
    return inCols;
}

void Systemaccounts::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPasswordhash())
        {
            binder << getValueOfPasswordhash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSecuritystamp())
        {
            binder << getValueOfSecuritystamp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDisplayname())
        {
            binder << getValueOfDisplayname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAvatar())
        {
            binder << getValueOfAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAccessfailedcount())
        {
            binder << getValueOfAccessfailedcount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsemailconfirmed())
        {
            binder << getValueOfIsemailconfirmed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPhonenumber())
        {
            binder << getValueOfPhonenumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsphonenumberconfirmed())
        {
            binder << getValueOfIsphonenumberconfirmed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getTwofactorenabled())
        {
            binder << getValueOfTwofactorenabled();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getSessionid())
        {
            binder << getValueOfSessionid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getPrivatekey())
        {
            binder << getValueOfPrivatekey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getIsfirsttimelogin())
        {
            binder << getValueOfIsfirsttimelogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getIshrreference())
        {
            binder << getValueOfIshrreference();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getSession())
        {
            binder << getValueOfSession();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getCreateddate())
        {
            binder << getValueOfCreateddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getCreatedby())
        {
            binder << getValueOfCreatedby();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getUpdateddate())
        {
            binder << getValueOfUpdateddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getUpdatedby())
        {
            binder << getValueOfUpdatedby();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getSectionid())
        {
            binder << getValueOfSectionid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Systemaccounts::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    return ret;
}

void Systemaccounts::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getAccountid())
        {
            binder << getValueOfAccountid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPasswordhash())
        {
            binder << getValueOfPasswordhash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSecuritystamp())
        {
            binder << getValueOfSecuritystamp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDisplayname())
        {
            binder << getValueOfDisplayname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAvatar())
        {
            binder << getValueOfAvatar();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAccessfailedcount())
        {
            binder << getValueOfAccessfailedcount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getIsemailconfirmed())
        {
            binder << getValueOfIsemailconfirmed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPhonenumber())
        {
            binder << getValueOfPhonenumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsphonenumberconfirmed())
        {
            binder << getValueOfIsphonenumberconfirmed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getTwofactorenabled())
        {
            binder << getValueOfTwofactorenabled();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getSessionid())
        {
            binder << getValueOfSessionid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getPrivatekey())
        {
            binder << getValueOfPrivatekey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getIsfirsttimelogin())
        {
            binder << getValueOfIsfirsttimelogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getIshrreference())
        {
            binder << getValueOfIshrreference();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getSession())
        {
            binder << getValueOfSession();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getCreateddate())
        {
            binder << getValueOfCreateddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getCreatedby())
        {
            binder << getValueOfCreatedby();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getUpdateddate())
        {
            binder << getValueOfUpdateddate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getUpdatedby())
        {
            binder << getValueOfUpdatedby();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getSectionid())
        {
            binder << getValueOfSectionid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Systemaccounts::toJson() const
{
    Json::Value ret;
    if(getAccountid())
    {
        ret["AccountId"]=getValueOfAccountid();
    }
    else
    {
        ret["AccountId"]=Json::Value();
    }
    if(getUsername())
    {
        ret["Username"]=getValueOfUsername();
    }
    else
    {
        ret["Username"]=Json::Value();
    }
    if(getPasswordhash())
    {
        ret["PasswordHash"]=getValueOfPasswordhash();
    }
    else
    {
        ret["PasswordHash"]=Json::Value();
    }
    if(getSecuritystamp())
    {
        ret["SecurityStamp"]=getValueOfSecuritystamp();
    }
    else
    {
        ret["SecurityStamp"]=Json::Value();
    }
    if(getDisplayname())
    {
        ret["DisplayName"]=getValueOfDisplayname();
    }
    else
    {
        ret["DisplayName"]=Json::Value();
    }
    if(getAvatar())
    {
        ret["Avatar"]=getValueOfAvatar();
    }
    else
    {
        ret["Avatar"]=Json::Value();
    }
    if(getType())
    {
        ret["Type"]=getValueOfType();
    }
    else
    {
        ret["Type"]=Json::Value();
    }
    if(getAccessfailedcount())
    {
        ret["AccessFailedCount"]=getValueOfAccessfailedcount();
    }
    else
    {
        ret["AccessFailedCount"]=Json::Value();
    }
    if(getEmail())
    {
        ret["Email"]=getValueOfEmail();
    }
    else
    {
        ret["Email"]=Json::Value();
    }
    if(getIsemailconfirmed())
    {
        ret["IsEmailConfirmed"]=getValueOfIsemailconfirmed();
    }
    else
    {
        ret["IsEmailConfirmed"]=Json::Value();
    }
    if(getPhonenumber())
    {
        ret["PhoneNumber"]=getValueOfPhonenumber();
    }
    else
    {
        ret["PhoneNumber"]=Json::Value();
    }
    if(getIsphonenumberconfirmed())
    {
        ret["IsPhoneNumberConfirmed"]=getValueOfIsphonenumberconfirmed();
    }
    else
    {
        ret["IsPhoneNumberConfirmed"]=Json::Value();
    }
    if(getTwofactorenabled())
    {
        ret["TwoFactorEnabled"]=getValueOfTwofactorenabled();
    }
    else
    {
        ret["TwoFactorEnabled"]=Json::Value();
    }
    if(getSessionid())
    {
        ret["SessionId"]=getValueOfSessionid();
    }
    else
    {
        ret["SessionId"]=Json::Value();
    }
    if(getStatus())
    {
        ret["Status"]=getValueOfStatus();
    }
    else
    {
        ret["Status"]=Json::Value();
    }
    if(getPrivatekey())
    {
        ret["PrivateKey"]=getValueOfPrivatekey();
    }
    else
    {
        ret["PrivateKey"]=Json::Value();
    }
    if(getIsfirsttimelogin())
    {
        ret["IsFirstTimeLogin"]=getValueOfIsfirsttimelogin();
    }
    else
    {
        ret["IsFirstTimeLogin"]=Json::Value();
    }
    if(getIshrreference())
    {
        ret["IsHRReference"]=getValueOfIshrreference();
    }
    else
    {
        ret["IsHRReference"]=Json::Value();
    }
    if(getSession())
    {
        ret["Session"]=getValueOfSession();
    }
    else
    {
        ret["Session"]=Json::Value();
    }
    if(getCreateddate())
    {
        ret["CreatedDate"]=getCreateddate()->toDbStringLocal();
    }
    else
    {
        ret["CreatedDate"]=Json::Value();
    }
    if(getCreatedby())
    {
        ret["CreatedBy"]=getValueOfCreatedby();
    }
    else
    {
        ret["CreatedBy"]=Json::Value();
    }
    if(getUpdateddate())
    {
        ret["UpdatedDate"]=getUpdateddate()->toDbStringLocal();
    }
    else
    {
        ret["UpdatedDate"]=Json::Value();
    }
    if(getUpdatedby())
    {
        ret["UpdatedBy"]=getValueOfUpdatedby();
    }
    else
    {
        ret["UpdatedBy"]=Json::Value();
    }
    if(getSectionid())
    {
        ret["SectionId"]=getValueOfSectionid();
    }
    else
    {
        ret["SectionId"]=Json::Value();
    }
    return ret;
}

Json::Value Systemaccounts::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 24)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getAccountid())
            {
                ret[pMasqueradingVector[0]]=getValueOfAccountid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getUsername())
            {
                ret[pMasqueradingVector[1]]=getValueOfUsername();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getPasswordhash())
            {
                ret[pMasqueradingVector[2]]=getValueOfPasswordhash();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSecuritystamp())
            {
                ret[pMasqueradingVector[3]]=getValueOfSecuritystamp();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDisplayname())
            {
                ret[pMasqueradingVector[4]]=getValueOfDisplayname();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAvatar())
            {
                ret[pMasqueradingVector[5]]=getValueOfAvatar();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[6]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getAccessfailedcount())
            {
                ret[pMasqueradingVector[7]]=getValueOfAccessfailedcount();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[8]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getIsemailconfirmed())
            {
                ret[pMasqueradingVector[9]]=getValueOfIsemailconfirmed();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getPhonenumber())
            {
                ret[pMasqueradingVector[10]]=getValueOfPhonenumber();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getIsphonenumberconfirmed())
            {
                ret[pMasqueradingVector[11]]=getValueOfIsphonenumberconfirmed();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getTwofactorenabled())
            {
                ret[pMasqueradingVector[12]]=getValueOfTwofactorenabled();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getSessionid())
            {
                ret[pMasqueradingVector[13]]=getValueOfSessionid();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[14]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getPrivatekey())
            {
                ret[pMasqueradingVector[15]]=getValueOfPrivatekey();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getIsfirsttimelogin())
            {
                ret[pMasqueradingVector[16]]=getValueOfIsfirsttimelogin();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getIshrreference())
            {
                ret[pMasqueradingVector[17]]=getValueOfIshrreference();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getSession())
            {
                ret[pMasqueradingVector[18]]=getValueOfSession();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getCreateddate())
            {
                ret[pMasqueradingVector[19]]=getCreateddate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getCreatedby())
            {
                ret[pMasqueradingVector[20]]=getValueOfCreatedby();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getUpdateddate())
            {
                ret[pMasqueradingVector[21]]=getUpdateddate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getUpdatedby())
            {
                ret[pMasqueradingVector[22]]=getValueOfUpdatedby();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getSectionid())
            {
                ret[pMasqueradingVector[23]]=getValueOfSectionid();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getAccountid())
    {
        ret["AccountId"]=getValueOfAccountid();
    }
    else
    {
        ret["AccountId"]=Json::Value();
    }
    if(getUsername())
    {
        ret["Username"]=getValueOfUsername();
    }
    else
    {
        ret["Username"]=Json::Value();
    }
    if(getPasswordhash())
    {
        ret["PasswordHash"]=getValueOfPasswordhash();
    }
    else
    {
        ret["PasswordHash"]=Json::Value();
    }
    if(getSecuritystamp())
    {
        ret["SecurityStamp"]=getValueOfSecuritystamp();
    }
    else
    {
        ret["SecurityStamp"]=Json::Value();
    }
    if(getDisplayname())
    {
        ret["DisplayName"]=getValueOfDisplayname();
    }
    else
    {
        ret["DisplayName"]=Json::Value();
    }
    if(getAvatar())
    {
        ret["Avatar"]=getValueOfAvatar();
    }
    else
    {
        ret["Avatar"]=Json::Value();
    }
    if(getType())
    {
        ret["Type"]=getValueOfType();
    }
    else
    {
        ret["Type"]=Json::Value();
    }
    if(getAccessfailedcount())
    {
        ret["AccessFailedCount"]=getValueOfAccessfailedcount();
    }
    else
    {
        ret["AccessFailedCount"]=Json::Value();
    }
    if(getEmail())
    {
        ret["Email"]=getValueOfEmail();
    }
    else
    {
        ret["Email"]=Json::Value();
    }
    if(getIsemailconfirmed())
    {
        ret["IsEmailConfirmed"]=getValueOfIsemailconfirmed();
    }
    else
    {
        ret["IsEmailConfirmed"]=Json::Value();
    }
    if(getPhonenumber())
    {
        ret["PhoneNumber"]=getValueOfPhonenumber();
    }
    else
    {
        ret["PhoneNumber"]=Json::Value();
    }
    if(getIsphonenumberconfirmed())
    {
        ret["IsPhoneNumberConfirmed"]=getValueOfIsphonenumberconfirmed();
    }
    else
    {
        ret["IsPhoneNumberConfirmed"]=Json::Value();
    }
    if(getTwofactorenabled())
    {
        ret["TwoFactorEnabled"]=getValueOfTwofactorenabled();
    }
    else
    {
        ret["TwoFactorEnabled"]=Json::Value();
    }
    if(getSessionid())
    {
        ret["SessionId"]=getValueOfSessionid();
    }
    else
    {
        ret["SessionId"]=Json::Value();
    }
    if(getStatus())
    {
        ret["Status"]=getValueOfStatus();
    }
    else
    {
        ret["Status"]=Json::Value();
    }
    if(getPrivatekey())
    {
        ret["PrivateKey"]=getValueOfPrivatekey();
    }
    else
    {
        ret["PrivateKey"]=Json::Value();
    }
    if(getIsfirsttimelogin())
    {
        ret["IsFirstTimeLogin"]=getValueOfIsfirsttimelogin();
    }
    else
    {
        ret["IsFirstTimeLogin"]=Json::Value();
    }
    if(getIshrreference())
    {
        ret["IsHRReference"]=getValueOfIshrreference();
    }
    else
    {
        ret["IsHRReference"]=Json::Value();
    }
    if(getSession())
    {
        ret["Session"]=getValueOfSession();
    }
    else
    {
        ret["Session"]=Json::Value();
    }
    if(getCreateddate())
    {
        ret["CreatedDate"]=getCreateddate()->toDbStringLocal();
    }
    else
    {
        ret["CreatedDate"]=Json::Value();
    }
    if(getCreatedby())
    {
        ret["CreatedBy"]=getValueOfCreatedby();
    }
    else
    {
        ret["CreatedBy"]=Json::Value();
    }
    if(getUpdateddate())
    {
        ret["UpdatedDate"]=getUpdateddate()->toDbStringLocal();
    }
    else
    {
        ret["UpdatedDate"]=Json::Value();
    }
    if(getUpdatedby())
    {
        ret["UpdatedBy"]=getValueOfUpdatedby();
    }
    else
    {
        ret["UpdatedBy"]=Json::Value();
    }
    if(getSectionid())
    {
        ret["SectionId"]=getValueOfSectionid();
    }
    else
    {
        ret["SectionId"]=Json::Value();
    }
    return ret;
}

bool Systemaccounts::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("AccountId"))
    {
        if(!validJsonOfField(0, "AccountId", pJson["AccountId"], err, true))
            return false;
    }
    if(pJson.isMember("Username"))
    {
        if(!validJsonOfField(1, "Username", pJson["Username"], err, true))
            return false;
    }
    if(pJson.isMember("PasswordHash"))
    {
        if(!validJsonOfField(2, "PasswordHash", pJson["PasswordHash"], err, true))
            return false;
    }
    if(pJson.isMember("SecurityStamp"))
    {
        if(!validJsonOfField(3, "SecurityStamp", pJson["SecurityStamp"], err, true))
            return false;
    }
    if(pJson.isMember("DisplayName"))
    {
        if(!validJsonOfField(4, "DisplayName", pJson["DisplayName"], err, true))
            return false;
    }
    if(pJson.isMember("Avatar"))
    {
        if(!validJsonOfField(5, "Avatar", pJson["Avatar"], err, true))
            return false;
    }
    if(pJson.isMember("Type"))
    {
        if(!validJsonOfField(6, "Type", pJson["Type"], err, true))
            return false;
    }
    else
    {
        err="The Type column cannot be null";
        return false;
    }
    if(pJson.isMember("AccessFailedCount"))
    {
        if(!validJsonOfField(7, "AccessFailedCount", pJson["AccessFailedCount"], err, true))
            return false;
    }
    if(pJson.isMember("Email"))
    {
        if(!validJsonOfField(8, "Email", pJson["Email"], err, true))
            return false;
    }
    if(pJson.isMember("IsEmailConfirmed"))
    {
        if(!validJsonOfField(9, "IsEmailConfirmed", pJson["IsEmailConfirmed"], err, true))
            return false;
    }
    if(pJson.isMember("PhoneNumber"))
    {
        if(!validJsonOfField(10, "PhoneNumber", pJson["PhoneNumber"], err, true))
            return false;
    }
    if(pJson.isMember("IsPhoneNumberConfirmed"))
    {
        if(!validJsonOfField(11, "IsPhoneNumberConfirmed", pJson["IsPhoneNumberConfirmed"], err, true))
            return false;
    }
    if(pJson.isMember("TwoFactorEnabled"))
    {
        if(!validJsonOfField(12, "TwoFactorEnabled", pJson["TwoFactorEnabled"], err, true))
            return false;
    }
    if(pJson.isMember("SessionId"))
    {
        if(!validJsonOfField(13, "SessionId", pJson["SessionId"], err, true))
            return false;
    }
    if(pJson.isMember("Status"))
    {
        if(!validJsonOfField(14, "Status", pJson["Status"], err, true))
            return false;
    }
    if(pJson.isMember("PrivateKey"))
    {
        if(!validJsonOfField(15, "PrivateKey", pJson["PrivateKey"], err, true))
            return false;
    }
    if(pJson.isMember("IsFirstTimeLogin"))
    {
        if(!validJsonOfField(16, "IsFirstTimeLogin", pJson["IsFirstTimeLogin"], err, true))
            return false;
    }
    if(pJson.isMember("IsHRReference"))
    {
        if(!validJsonOfField(17, "IsHRReference", pJson["IsHRReference"], err, true))
            return false;
    }
    if(pJson.isMember("Session"))
    {
        if(!validJsonOfField(18, "Session", pJson["Session"], err, true))
            return false;
    }
    if(pJson.isMember("CreatedDate"))
    {
        if(!validJsonOfField(19, "CreatedDate", pJson["CreatedDate"], err, true))
            return false;
    }
    else
    {
        err="The CreatedDate column cannot be null";
        return false;
    }
    if(pJson.isMember("CreatedBy"))
    {
        if(!validJsonOfField(20, "CreatedBy", pJson["CreatedBy"], err, true))
            return false;
    }
    if(pJson.isMember("UpdatedDate"))
    {
        if(!validJsonOfField(21, "UpdatedDate", pJson["UpdatedDate"], err, true))
            return false;
    }
    if(pJson.isMember("UpdatedBy"))
    {
        if(!validJsonOfField(22, "UpdatedBy", pJson["UpdatedBy"], err, true))
            return false;
    }
    if(pJson.isMember("SectionId"))
    {
        if(!validJsonOfField(23, "SectionId", pJson["SectionId"], err, true))
            return false;
    }
    return true;
}
bool Systemaccounts::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 24)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[17].empty())
      {
          if(pJson.isMember(pMasqueradingVector[17]))
          {
              if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[18].empty())
      {
          if(pJson.isMember(pMasqueradingVector[18]))
          {
              if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[19].empty())
      {
          if(pJson.isMember(pMasqueradingVector[19]))
          {
              if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[19] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[20].empty())
      {
          if(pJson.isMember(pMasqueradingVector[20]))
          {
              if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[21].empty())
      {
          if(pJson.isMember(pMasqueradingVector[21]))
          {
              if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[22].empty())
      {
          if(pJson.isMember(pMasqueradingVector[22]))
          {
              if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[23].empty())
      {
          if(pJson.isMember(pMasqueradingVector[23]))
          {
              if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Systemaccounts::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("AccountId"))
    {
        if(!validJsonOfField(0, "AccountId", pJson["AccountId"], err, false))
            return false;
    }
    if(pJson.isMember("Username"))
    {
        if(!validJsonOfField(1, "Username", pJson["Username"], err, false))
            return false;
    }
    if(pJson.isMember("PasswordHash"))
    {
        if(!validJsonOfField(2, "PasswordHash", pJson["PasswordHash"], err, false))
            return false;
    }
    if(pJson.isMember("SecurityStamp"))
    {
        if(!validJsonOfField(3, "SecurityStamp", pJson["SecurityStamp"], err, false))
            return false;
    }
    if(pJson.isMember("DisplayName"))
    {
        if(!validJsonOfField(4, "DisplayName", pJson["DisplayName"], err, false))
            return false;
    }
    if(pJson.isMember("Avatar"))
    {
        if(!validJsonOfField(5, "Avatar", pJson["Avatar"], err, false))
            return false;
    }
    if(pJson.isMember("Type"))
    {
        if(!validJsonOfField(6, "Type", pJson["Type"], err, false))
            return false;
    }
    if(pJson.isMember("AccessFailedCount"))
    {
        if(!validJsonOfField(7, "AccessFailedCount", pJson["AccessFailedCount"], err, false))
            return false;
    }
    if(pJson.isMember("Email"))
    {
        if(!validJsonOfField(8, "Email", pJson["Email"], err, false))
            return false;
    }
    if(pJson.isMember("IsEmailConfirmed"))
    {
        if(!validJsonOfField(9, "IsEmailConfirmed", pJson["IsEmailConfirmed"], err, false))
            return false;
    }
    if(pJson.isMember("PhoneNumber"))
    {
        if(!validJsonOfField(10, "PhoneNumber", pJson["PhoneNumber"], err, false))
            return false;
    }
    if(pJson.isMember("IsPhoneNumberConfirmed"))
    {
        if(!validJsonOfField(11, "IsPhoneNumberConfirmed", pJson["IsPhoneNumberConfirmed"], err, false))
            return false;
    }
    if(pJson.isMember("TwoFactorEnabled"))
    {
        if(!validJsonOfField(12, "TwoFactorEnabled", pJson["TwoFactorEnabled"], err, false))
            return false;
    }
    if(pJson.isMember("SessionId"))
    {
        if(!validJsonOfField(13, "SessionId", pJson["SessionId"], err, false))
            return false;
    }
    if(pJson.isMember("Status"))
    {
        if(!validJsonOfField(14, "Status", pJson["Status"], err, false))
            return false;
    }
    if(pJson.isMember("PrivateKey"))
    {
        if(!validJsonOfField(15, "PrivateKey", pJson["PrivateKey"], err, false))
            return false;
    }
    if(pJson.isMember("IsFirstTimeLogin"))
    {
        if(!validJsonOfField(16, "IsFirstTimeLogin", pJson["IsFirstTimeLogin"], err, false))
            return false;
    }
    if(pJson.isMember("IsHRReference"))
    {
        if(!validJsonOfField(17, "IsHRReference", pJson["IsHRReference"], err, false))
            return false;
    }
    if(pJson.isMember("Session"))
    {
        if(!validJsonOfField(18, "Session", pJson["Session"], err, false))
            return false;
    }
    if(pJson.isMember("CreatedDate"))
    {
        if(!validJsonOfField(19, "CreatedDate", pJson["CreatedDate"], err, false))
            return false;
    }
    if(pJson.isMember("CreatedBy"))
    {
        if(!validJsonOfField(20, "CreatedBy", pJson["CreatedBy"], err, false))
            return false;
    }
    if(pJson.isMember("UpdatedDate"))
    {
        if(!validJsonOfField(21, "UpdatedDate", pJson["UpdatedDate"], err, false))
            return false;
    }
    if(pJson.isMember("UpdatedBy"))
    {
        if(!validJsonOfField(22, "UpdatedBy", pJson["UpdatedBy"], err, false))
            return false;
    }
    if(pJson.isMember("SectionId"))
    {
        if(!validJsonOfField(23, "SectionId", pJson["SectionId"], err, false))
            return false;
    }
    return true;
}
bool Systemaccounts::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 24)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
      if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
      {
          if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
              return false;
      }
      if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
      {
          if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
              return false;
      }
      if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
      {
          if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
              return false;
      }
      if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
      {
          if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
              return false;
      }
      if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
      {
          if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
              return false;
      }
      if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
      {
          if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
              return false;
      }
      if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
      {
          if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Systemaccounts::validJsonOfField(size_t index,
                                      const std::string &fieldName,
                                      const Json::Value &pJson,
                                      std::string &err,
                                      bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 21:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 23:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
