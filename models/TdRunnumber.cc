/**
 *
 *  TdRunnumber.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TdRunnumber.h"
#include "TmProgram.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::test;

const std::string TdRunnumber::Cols::_programid = "programid";
const std::string TdRunnumber::Cols::_Year = "Year";
const std::string TdRunnumber::Cols::_Month = "Month";
const std::string TdRunnumber::Cols::_additional = "additional";
const std::string TdRunnumber::Cols::_runningnumber = "runningnumber";
const std::string TdRunnumber::Cols::_insertdate = "insertdate";
const std::string TdRunnumber::Cols::_updatedate = "updatedate";
const std::string TdRunnumber::primaryKeyName = "";
const bool TdRunnumber::hasPrimaryKey = false;
const std::string TdRunnumber::tableName = "td_runnumber";

const std::vector<typename TdRunnumber::MetaData> TdRunnumber::metaData_={
{"programid","int32_t","integer",4,0,0,1},
{"Year","std::string","character varying",4,0,0,0},
{"Month","std::string","character varying",2,0,0,0},
{"additional","std::string","character varying",10,0,0,0},
{"runningnumber","int32_t","integer",4,0,0,1},
{"insertdate","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updatedate","::trantor::Date","timestamp without time zone",0,0,0,0}
};
const std::string &TdRunnumber::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TdRunnumber::TdRunnumber(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["programid"].isNull())
        {
            programid_=std::make_shared<int32_t>(r["programid"].as<int32_t>());
        }
        if(!r["Year"].isNull())
        {
            year_=std::make_shared<std::string>(r["Year"].as<std::string>());
        }
        if(!r["Month"].isNull())
        {
            month_=std::make_shared<std::string>(r["Month"].as<std::string>());
        }
        if(!r["additional"].isNull())
        {
            additional_=std::make_shared<std::string>(r["additional"].as<std::string>());
        }
        if(!r["runningnumber"].isNull())
        {
            runningnumber_=std::make_shared<int32_t>(r["runningnumber"].as<int32_t>());
        }
        if(!r["insertdate"].isNull())
        {
            auto timeStr = r["insertdate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updatedate"].isNull())
        {
            auto timeStr = r["updatedate"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            programid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            year_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            month_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            additional_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            runningnumber_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

TdRunnumber::TdRunnumber(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            programid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            year_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            month_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            additional_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            runningnumber_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

TdRunnumber::TdRunnumber(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("programid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["programid"].isNull())
        {
            programid_=std::make_shared<int32_t>((int32_t)pJson["programid"].asInt64());
        }
    }
    if(pJson.isMember("Year"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["Year"].isNull())
        {
            year_=std::make_shared<std::string>(pJson["Year"].asString());
        }
    }
    if(pJson.isMember("Month"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["Month"].isNull())
        {
            month_=std::make_shared<std::string>(pJson["Month"].asString());
        }
    }
    if(pJson.isMember("additional"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["additional"].isNull())
        {
            additional_=std::make_shared<std::string>(pJson["additional"].asString());
        }
    }
    if(pJson.isMember("runningnumber"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["runningnumber"].isNull())
        {
            runningnumber_=std::make_shared<int32_t>((int32_t)pJson["runningnumber"].asInt64());
        }
    }
    if(pJson.isMember("insertdate"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["insertdate"].isNull())
        {
            auto timeStr = pJson["insertdate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedate"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["updatedate"].isNull())
        {
            auto timeStr = pJson["updatedate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void TdRunnumber::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            programid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            year_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            month_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            additional_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            runningnumber_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void TdRunnumber::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("programid"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["programid"].isNull())
        {
            programid_=std::make_shared<int32_t>((int32_t)pJson["programid"].asInt64());
        }
    }
    if(pJson.isMember("Year"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["Year"].isNull())
        {
            year_=std::make_shared<std::string>(pJson["Year"].asString());
        }
    }
    if(pJson.isMember("Month"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["Month"].isNull())
        {
            month_=std::make_shared<std::string>(pJson["Month"].asString());
        }
    }
    if(pJson.isMember("additional"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["additional"].isNull())
        {
            additional_=std::make_shared<std::string>(pJson["additional"].asString());
        }
    }
    if(pJson.isMember("runningnumber"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["runningnumber"].isNull())
        {
            runningnumber_=std::make_shared<int32_t>((int32_t)pJson["runningnumber"].asInt64());
        }
    }
    if(pJson.isMember("insertdate"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["insertdate"].isNull())
        {
            auto timeStr = pJson["insertdate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                insertdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedate"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["updatedate"].isNull())
        {
            auto timeStr = pJson["updatedate"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int32_t &TdRunnumber::getValueOfProgramid() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(programid_)
        return *programid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TdRunnumber::getProgramid() const noexcept
{
    return programid_;
}
void TdRunnumber::setProgramid(const int32_t &pProgramid) noexcept
{
    programid_ = std::make_shared<int32_t>(pProgramid);
    dirtyFlag_[0] = true;
}

const std::string &TdRunnumber::getValueOfYear() const noexcept
{
    static const std::string defaultValue = std::string();
    if(year_)
        return *year_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TdRunnumber::getYear() const noexcept
{
    return year_;
}
void TdRunnumber::setYear(const std::string &pYear) noexcept
{
    year_ = std::make_shared<std::string>(pYear);
    dirtyFlag_[1] = true;
}
void TdRunnumber::setYear(std::string &&pYear) noexcept
{
    year_ = std::make_shared<std::string>(std::move(pYear));
    dirtyFlag_[1] = true;
}
void TdRunnumber::setYearToNull() noexcept
{
    year_.reset();
    dirtyFlag_[1] = true;
}

const std::string &TdRunnumber::getValueOfMonth() const noexcept
{
    static const std::string defaultValue = std::string();
    if(month_)
        return *month_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TdRunnumber::getMonth() const noexcept
{
    return month_;
}
void TdRunnumber::setMonth(const std::string &pMonth) noexcept
{
    month_ = std::make_shared<std::string>(pMonth);
    dirtyFlag_[2] = true;
}
void TdRunnumber::setMonth(std::string &&pMonth) noexcept
{
    month_ = std::make_shared<std::string>(std::move(pMonth));
    dirtyFlag_[2] = true;
}
void TdRunnumber::setMonthToNull() noexcept
{
    month_.reset();
    dirtyFlag_[2] = true;
}

const std::string &TdRunnumber::getValueOfAdditional() const noexcept
{
    static const std::string defaultValue = std::string();
    if(additional_)
        return *additional_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TdRunnumber::getAdditional() const noexcept
{
    return additional_;
}
void TdRunnumber::setAdditional(const std::string &pAdditional) noexcept
{
    additional_ = std::make_shared<std::string>(pAdditional);
    dirtyFlag_[3] = true;
}
void TdRunnumber::setAdditional(std::string &&pAdditional) noexcept
{
    additional_ = std::make_shared<std::string>(std::move(pAdditional));
    dirtyFlag_[3] = true;
}
void TdRunnumber::setAdditionalToNull() noexcept
{
    additional_.reset();
    dirtyFlag_[3] = true;
}

const int32_t &TdRunnumber::getValueOfRunningnumber() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(runningnumber_)
        return *runningnumber_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TdRunnumber::getRunningnumber() const noexcept
{
    return runningnumber_;
}
void TdRunnumber::setRunningnumber(const int32_t &pRunningnumber) noexcept
{
    runningnumber_ = std::make_shared<int32_t>(pRunningnumber);
    dirtyFlag_[4] = true;
}

const ::trantor::Date &TdRunnumber::getValueOfInsertdate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(insertdate_)
        return *insertdate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TdRunnumber::getInsertdate() const noexcept
{
    return insertdate_;
}
void TdRunnumber::setInsertdate(const ::trantor::Date &pInsertdate) noexcept
{
    insertdate_ = std::make_shared<::trantor::Date>(pInsertdate);
    dirtyFlag_[5] = true;
}

const ::trantor::Date &TdRunnumber::getValueOfUpdatedate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedate_)
        return *updatedate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TdRunnumber::getUpdatedate() const noexcept
{
    return updatedate_;
}
void TdRunnumber::setUpdatedate(const ::trantor::Date &pUpdatedate) noexcept
{
    updatedate_ = std::make_shared<::trantor::Date>(pUpdatedate);
    dirtyFlag_[6] = true;
}
void TdRunnumber::setUpdatedateToNull() noexcept
{
    updatedate_.reset();
    dirtyFlag_[6] = true;
}

void TdRunnumber::updateId(const uint64_t id)
{
}

const std::vector<std::string> &TdRunnumber::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "programid",
        "Year",
        "Month",
        "additional",
        "runningnumber",
        "insertdate",
        "updatedate"
    };
    return inCols;
}

void TdRunnumber::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getProgramid())
        {
            binder << getValueOfProgramid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getYear())
        {
            binder << getValueOfYear();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getMonth())
        {
            binder << getValueOfMonth();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAdditional())
        {
            binder << getValueOfAdditional();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRunningnumber())
        {
            binder << getValueOfRunningnumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getInsertdate())
        {
            binder << getValueOfInsertdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUpdatedate())
        {
            binder << getValueOfUpdatedate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TdRunnumber::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void TdRunnumber::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getProgramid())
        {
            binder << getValueOfProgramid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getYear())
        {
            binder << getValueOfYear();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getMonth())
        {
            binder << getValueOfMonth();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getAdditional())
        {
            binder << getValueOfAdditional();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRunningnumber())
        {
            binder << getValueOfRunningnumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getInsertdate())
        {
            binder << getValueOfInsertdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUpdatedate())
        {
            binder << getValueOfUpdatedate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TdRunnumber::toJson() const
{
    Json::Value ret;
    if(getProgramid())
    {
        ret["programid"]=getValueOfProgramid();
    }
    else
    {
        ret["programid"]=Json::Value();
    }
    if(getYear())
    {
        ret["Year"]=getValueOfYear();
    }
    else
    {
        ret["Year"]=Json::Value();
    }
    if(getMonth())
    {
        ret["Month"]=getValueOfMonth();
    }
    else
    {
        ret["Month"]=Json::Value();
    }
    if(getAdditional())
    {
        ret["additional"]=getValueOfAdditional();
    }
    else
    {
        ret["additional"]=Json::Value();
    }
    if(getRunningnumber())
    {
        ret["runningnumber"]=getValueOfRunningnumber();
    }
    else
    {
        ret["runningnumber"]=Json::Value();
    }
    if(getInsertdate())
    {
        ret["insertdate"]=getInsertdate()->toDbStringLocal();
    }
    else
    {
        ret["insertdate"]=Json::Value();
    }
    if(getUpdatedate())
    {
        ret["updatedate"]=getUpdatedate()->toDbStringLocal();
    }
    else
    {
        ret["updatedate"]=Json::Value();
    }
    return ret;
}

Json::Value TdRunnumber::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getProgramid())
            {
                ret[pMasqueradingVector[0]]=getValueOfProgramid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getYear())
            {
                ret[pMasqueradingVector[1]]=getValueOfYear();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getMonth())
            {
                ret[pMasqueradingVector[2]]=getValueOfMonth();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getAdditional())
            {
                ret[pMasqueradingVector[3]]=getValueOfAdditional();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getRunningnumber())
            {
                ret[pMasqueradingVector[4]]=getValueOfRunningnumber();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getInsertdate())
            {
                ret[pMasqueradingVector[5]]=getInsertdate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getUpdatedate())
            {
                ret[pMasqueradingVector[6]]=getUpdatedate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getProgramid())
    {
        ret["programid"]=getValueOfProgramid();
    }
    else
    {
        ret["programid"]=Json::Value();
    }
    if(getYear())
    {
        ret["Year"]=getValueOfYear();
    }
    else
    {
        ret["Year"]=Json::Value();
    }
    if(getMonth())
    {
        ret["Month"]=getValueOfMonth();
    }
    else
    {
        ret["Month"]=Json::Value();
    }
    if(getAdditional())
    {
        ret["additional"]=getValueOfAdditional();
    }
    else
    {
        ret["additional"]=Json::Value();
    }
    if(getRunningnumber())
    {
        ret["runningnumber"]=getValueOfRunningnumber();
    }
    else
    {
        ret["runningnumber"]=Json::Value();
    }
    if(getInsertdate())
    {
        ret["insertdate"]=getInsertdate()->toDbStringLocal();
    }
    else
    {
        ret["insertdate"]=Json::Value();
    }
    if(getUpdatedate())
    {
        ret["updatedate"]=getUpdatedate()->toDbStringLocal();
    }
    else
    {
        ret["updatedate"]=Json::Value();
    }
    return ret;
}

bool TdRunnumber::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("programid"))
    {
        if(!validJsonOfField(0, "programid", pJson["programid"], err, true))
            return false;
    }
    else
    {
        err="The programid column cannot be null";
        return false;
    }
    if(pJson.isMember("Year"))
    {
        if(!validJsonOfField(1, "Year", pJson["Year"], err, true))
            return false;
    }
    if(pJson.isMember("Month"))
    {
        if(!validJsonOfField(2, "Month", pJson["Month"], err, true))
            return false;
    }
    if(pJson.isMember("additional"))
    {
        if(!validJsonOfField(3, "additional", pJson["additional"], err, true))
            return false;
    }
    if(pJson.isMember("runningnumber"))
    {
        if(!validJsonOfField(4, "runningnumber", pJson["runningnumber"], err, true))
            return false;
    }
    else
    {
        err="The runningnumber column cannot be null";
        return false;
    }
    if(pJson.isMember("insertdate"))
    {
        if(!validJsonOfField(5, "insertdate", pJson["insertdate"], err, true))
            return false;
    }
    else
    {
        err="The insertdate column cannot be null";
        return false;
    }
    if(pJson.isMember("updatedate"))
    {
        if(!validJsonOfField(6, "updatedate", pJson["updatedate"], err, true))
            return false;
    }
    return true;
}
bool TdRunnumber::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TdRunnumber::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("programid"))
    {
        if(!validJsonOfField(0, "programid", pJson["programid"], err, false))
            return false;
    }
    if(pJson.isMember("Year"))
    {
        if(!validJsonOfField(1, "Year", pJson["Year"], err, false))
            return false;
    }
    if(pJson.isMember("Month"))
    {
        if(!validJsonOfField(2, "Month", pJson["Month"], err, false))
            return false;
    }
    if(pJson.isMember("additional"))
    {
        if(!validJsonOfField(3, "additional", pJson["additional"], err, false))
            return false;
    }
    if(pJson.isMember("runningnumber"))
    {
        if(!validJsonOfField(4, "runningnumber", pJson["runningnumber"], err, false))
            return false;
    }
    if(pJson.isMember("insertdate"))
    {
        if(!validJsonOfField(5, "insertdate", pJson["insertdate"], err, false))
            return false;
    }
    if(pJson.isMember("updatedate"))
    {
        if(!validJsonOfField(6, "updatedate", pJson["updatedate"], err, false))
            return false;
    }
    return true;
}
bool TdRunnumber::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TdRunnumber::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 4)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 4)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
TmProgram TdRunnumber::getTm_program(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from tm_program where programid = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *programid_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return TmProgram(r[0]);
}

void TdRunnumber::getTm_program(const DbClientPtr &clientPtr,
                                const std::function<void(TmProgram)> &rcb,
                                const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from tm_program where programid = $1";
    *clientPtr << sql
               << *programid_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(TmProgram(r[0]));
                    }
               }
               >> ecb;
}
