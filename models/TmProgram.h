/**
 *
 *  TmProgram.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace test
{
class TdRunnumber;
class TmResetcountpoint;

class TmProgram
{
  public:
    struct Cols
    {
        static const std::string _programid;
        static const std::string _programname;
        static const std::string _runnopattern;
        static const std::string _yeardigit;
        static const std::string _rundigit;
        static const std::string _resetcountpoint;
        static const std::string _insertdate;
        static const std::string _insertby;
        static const std::string _updatedate;
        static const std::string _updateby;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = void;
    int getPrimaryKey() const { assert(false); return 0; }

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit TmProgram(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit TmProgram(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    TmProgram(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    TmProgram() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column programid  */
    ///Get the value of the column programid, returns the default value if the column is null
    const int32_t &getValueOfProgramid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getProgramid() const noexcept;
    ///Set the value of the column programid
    void setProgramid(const int32_t &pProgramid) noexcept;

    /**  For column programname  */
    ///Get the value of the column programname, returns the default value if the column is null
    const std::string &getValueOfProgramname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getProgramname() const noexcept;
    ///Set the value of the column programname
    void setProgramname(const std::string &pProgramname) noexcept;
    void setProgramname(std::string &&pProgramname) noexcept;
    void setProgramnameToNull() noexcept;

    /**  For column runnopattern  */
    ///Get the value of the column runnopattern, returns the default value if the column is null
    const std::string &getValueOfRunnopattern() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRunnopattern() const noexcept;
    ///Set the value of the column runnopattern
    void setRunnopattern(const std::string &pRunnopattern) noexcept;
    void setRunnopattern(std::string &&pRunnopattern) noexcept;
    void setRunnopatternToNull() noexcept;

    /**  For column yeardigit  */
    ///Get the value of the column yeardigit, returns the default value if the column is null
    const int32_t &getValueOfYeardigit() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getYeardigit() const noexcept;
    ///Set the value of the column yeardigit
    void setYeardigit(const int32_t &pYeardigit) noexcept;

    /**  For column rundigit  */
    ///Get the value of the column rundigit, returns the default value if the column is null
    const int32_t &getValueOfRundigit() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getRundigit() const noexcept;
    ///Set the value of the column rundigit
    void setRundigit(const int32_t &pRundigit) noexcept;

    /**  For column resetcountpoint  */
    ///Get the value of the column resetcountpoint, returns the default value if the column is null
    const int32_t &getValueOfResetcountpoint() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getResetcountpoint() const noexcept;
    ///Set the value of the column resetcountpoint
    void setResetcountpoint(const int32_t &pResetcountpoint) noexcept;

    /**  For column insertdate  */
    ///Get the value of the column insertdate, returns the default value if the column is null
    const ::trantor::Date &getValueOfInsertdate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getInsertdate() const noexcept;
    ///Set the value of the column insertdate
    void setInsertdate(const ::trantor::Date &pInsertdate) noexcept;

    /**  For column insertby  */
    ///Get the value of the column insertby, returns the default value if the column is null
    const std::string &getValueOfInsertby() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getInsertby() const noexcept;
    ///Set the value of the column insertby
    void setInsertby(const std::string &pInsertby) noexcept;
    void setInsertby(std::string &&pInsertby) noexcept;
    void setInsertbyToNull() noexcept;

    /**  For column updatedate  */
    ///Get the value of the column updatedate, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedate() const noexcept;
    ///Set the value of the column updatedate
    void setUpdatedate(const ::trantor::Date &pUpdatedate) noexcept;
    void setUpdatedateToNull() noexcept;

    /**  For column updateby  */
    ///Get the value of the column updateby, returns the default value if the column is null
    const std::string &getValueOfUpdateby() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUpdateby() const noexcept;
    ///Set the value of the column updateby
    void setUpdateby(const std::string &pUpdateby) noexcept;
    void setUpdateby(std::string &&pUpdateby) noexcept;
    void setUpdatebyToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 10;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    std::vector<TdRunnumber> getTdRunnumber(const drogon::orm::DbClientPtr &clientPtr) const;
    void getTdRunnumber(const drogon::orm::DbClientPtr &clientPtr,
                        const std::function<void(std::vector<TdRunnumber>)> &rcb,
                        const drogon::orm::ExceptionCallback &ecb) const;
    TmResetcountpoint getTm_resetcountpoint(const drogon::orm::DbClientPtr &clientPtr) const;
    void getTm_resetcountpoint(const drogon::orm::DbClientPtr &clientPtr,
                               const std::function<void(TmResetcountpoint)> &rcb,
                               const drogon::orm::ExceptionCallback &ecb) const;
  private:
    friend drogon::orm::Mapper<TmProgram>;
    friend drogon::orm::BaseBuilder<TmProgram, true, true>;
    friend drogon::orm::BaseBuilder<TmProgram, true, false>;
    friend drogon::orm::BaseBuilder<TmProgram, false, true>;
    friend drogon::orm::BaseBuilder<TmProgram, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<TmProgram>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> programid_;
    std::shared_ptr<std::string> programname_;
    std::shared_ptr<std::string> runnopattern_;
    std::shared_ptr<int32_t> yeardigit_;
    std::shared_ptr<int32_t> rundigit_;
    std::shared_ptr<int32_t> resetcountpoint_;
    std::shared_ptr<::trantor::Date> insertdate_;
    std::shared_ptr<std::string> insertby_;
    std::shared_ptr<::trantor::Date> updatedate_;
    std::shared_ptr<std::string> updateby_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[10]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "programid,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "programname,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "runnopattern,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "yeardigit,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "rundigit,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "resetcountpoint,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "insertdate,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "insertby,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "updatedate,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "updateby,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        if(dirtyFlag_[0])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[1])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[9])
        {
            n = snprintf(placeholderStr,sizeof(placeholderStr),"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace test
} // namespace drogon_model
